import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatCardModule } from '@angular/material/card';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { MatStepperModule } from '@angular/material/stepper';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { TranslatePipe } from '../../../shared/pipes/translate.pipe';
import { ServiceCreationGuideComponent } from '../service-creation-guide/service-creation-guide.component';
import { SlotsCreationGuideComponent } from '../slots-creation-guide/slots-creation-guide.component';

enum PostBotCreationStep {
  WELCOME = 0,
  CREATE_SERVICE = 1,
  CREATE_SLOTS = 2,
  COMPLETE = 3
}

@Component({
  selector: 'app-post-bot-creation-guide',
  standalone: true,
  imports: [
    CommonModule,
    MatCardModule,
    MatButtonModule,
    MatIconModule,
    MatStepperModule,
    MatProgressSpinnerModule,
    TranslatePipe,
    ServiceCreationGuideComponent,
    SlotsCreationGuideComponent
  ],
  templateUrl: './post-bot-creation-guide.component.html',
  styleUrl: './post-bot-creation-guide.component.scss'
})
export class PostBotCreationGuideComponent implements OnInit {
  @Input() organizationId: number = 0;
  @Input() botUsername: string = '';
  @Output() guideCompleted = new EventEmitter<void>();
  @Output() skipGuide = new EventEmitter<void>();

  currentStep = PostBotCreationStep.WELCOME;
  PostBotCreationStep = PostBotCreationStep;
  
  serviceCreated = false;
  slotsCreated = false;

  constructor() {}

  ngOnInit(): void {}

  nextStep(): void {
    if (this.currentStep < PostBotCreationStep.COMPLETE) {
      this.currentStep++;
    }
  }

  previousStep(): void {
    if (this.currentStep > PostBotCreationStep.WELCOME) {
      this.currentStep--;
    }
  }

  onServiceCreated(): void {
    this.serviceCreated = true;
    this.nextStep();
  }

  onSlotsCreated(): void {
    this.slotsCreated = true;
    this.nextStep();
  }

  onServiceGuideSkipped(): void {
    this.nextStep();
  }

  onSlotsGuideSkipped(): void {
    this.nextStep();
  }

  completeGuide(): void {
    this.guideCompleted.emit();
  }

  skipEntireGuide(): void {
    this.skipGuide.emit();
  }

  getStepTitle(): string {
    switch (this.currentStep) {
      case PostBotCreationStep.WELCOME:
        return 'üéâ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!';
      case PostBotCreationStep.CREATE_SERVICE:
        return 'üìã –°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª—É–≥';
      case PostBotCreationStep.CREATE_SLOTS:
        return 'üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª–æ—Ç–æ–≤';
      case PostBotCreationStep.COMPLETE:
        return '‚úÖ –ì–æ—Ç–æ–≤–æ!';
      default:
        return '';
    }
  }

  getStepDescription(): string {
    switch (this.currentStep) {
      case PostBotCreationStep.WELCOME:
        return '–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –≤–∞—à –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏';
      case PostBotCreationStep.CREATE_SERVICE:
        return '–°–æ–∑–¥–∞–π—Ç–µ —É—Å–ª—É–≥–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∫–ª–∏–µ–Ω—Ç—ã —Å–º–æ–≥—É—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è';
      case PostBotCreationStep.CREATE_SLOTS:
        return '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏';
      case PostBotCreationStep.COMPLETE:
        return '–í–∞—à –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ö–ª–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram';
      default:
        return '';
    }
  }

  isFirstStep(): boolean {
    return this.currentStep === PostBotCreationStep.WELCOME;
  }

  isLastStep(): boolean {
    return this.currentStep === PostBotCreationStep.COMPLETE;
  }
}
