import { PrismaClient } from '@prisma/client';
import { AIService } from '../src/lib/ai/ai-service';

const prisma = new PrismaClient();
const aiService = new AIService();

async function testAIIntegrationWithOrganization() {
  try {
    console.log('ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏...\n');

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    let testOrg = await prisma.organization.findFirst({
      where: { name: 'Test AI Organization' }
    });

    if (!testOrg) {
      testOrg = await prisma.organization.create({
        data: {
          name: 'Test AI Organization',
          description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∏–Ω–∏–∫–∞ –∫—Ä–∞—Å–æ—Ç—ã —Å –ø–æ–ª–Ω—ã–º —Å–ø–µ–∫—Ç—Ä–æ–º —É—Å–ª—É–≥',
          address: '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 123, –ú–æ—Å–∫–≤–∞',
          workingHours: '–ü–Ω-–ü—Ç: 9:00-21:00, –°–±-–í—Å: 10:00-18:00',
          phone: '+7 (495) 123-45-67',
          email: 'info@testclinic.ru'
        }
      });
    }

    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:', testOrg.name);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —É—Å–ª—É–≥–∏
    let services = await prisma.service.findMany({
      where: { organizationId: testOrg.id }
    });

    if (services.length === 0) {
      services = await Promise.all([
        prisma.service.create({
          data: {
            name: '–ú–∞–Ω–∏–∫—é—Ä',
            nameRu: '–ú–∞–Ω–∏–∫—é—Ä',
            description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º',
            descriptionRu: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫–æ–º',
            durationMin: 60,
            organizationId: testOrg.id
          }
        }),
        prisma.service.create({
          data: {
            name: '–ü–µ–¥–∏–∫—é—Ä',
            nameRu: '–ü–µ–¥–∏–∫—é—Ä',
            description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–µ–¥–∏–∫—é—Ä',
            descriptionRu: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–µ–¥–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º',
            durationMin: 90,
            organizationId: testOrg.id
          }
        })
      ]);
    }

    console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ —É—Å–ª—É–≥–∏:', services.map(s => s.nameRu || s.name).join(', '));

    // –°–æ–∑–¥–∞–µ–º AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const aiConfig = await prisma.organizationAIConfig.upsert({
      where: { organizationId: testOrg.id },
      update: {
        provider: 'openai',
        apiKey: 'test-api-key', // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–ª—é—á
        model: 'gpt-4o-mini',
        maxTokens: 1000,
        temperature: 0.7,
        systemPrompt: '–¢—ã - –≤–µ–∂–ª–∏–≤—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–ª–∏–Ω–∏–∫–∏ –∫—Ä–∞—Å–æ—Ç—ã.',
        enabled: true
      },
      create: {
        organizationId: testOrg.id,
        provider: 'openai',
        apiKey: 'test-api-key',
        model: 'gpt-4o-mini',
        maxTokens: 1000,
        temperature: 0.7,
        systemPrompt: '–¢—ã - –≤–µ–∂–ª–∏–≤—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–ª–∏–Ω–∏–∫–∏ –∫—Ä–∞—Å–æ—Ç—ã.',
        enabled: true
      }
    });

    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    console.log('\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    const getOrganizationContext = (aiService as any).getOrganizationContext.bind(aiService);
    const context = await getOrganizationContext(testOrg.id);
    
    console.log('‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω:');
    console.log('  - –ù–∞–∑–≤–∞–Ω–∏–µ:', context.organizationName);
    console.log('  - –û–ø–∏—Å–∞–Ω–∏–µ:', context.description);
    console.log('  - –ê–¥—Ä–µ—Å:', context.address);
    console.log('  - –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:', context.workingHours);
    console.log('  - –¢–µ–ª–µ—Ñ–æ–Ω:', context.phone);
    console.log('  - Email:', context.email);
    console.log('  - –£—Å–ª—É–≥–∏:', context.services.length);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    console.log('\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞...');
    
    const { BaseAIProvider } = await import('../src/lib/ai/base-provider');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–º–ø—Ç–∞
    class TestAIProvider extends BaseAIProvider {
      name = 'test';
      models = ['test-model'];
      
      async sendMessage() {
        return { content: 'test', model: 'test', provider: 'test' };
      }
      
      validateConfig() {
        return true;
      }
    }
    
    const testProvider = new TestAIProvider();
    const systemPrompt = (testProvider as any).buildSystemPrompt(context);
    
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω:');
    console.log('---');
    console.log(systemPrompt);
    console.log('---');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ –ø—Ä–æ–º–ø—Ç
    const checks = [
      { field: '–Ω–∞–∑–≤–∞–Ω–∏–µ', value: context.organizationName, found: systemPrompt.includes(context.organizationName) },
      { field: '–æ–ø–∏—Å–∞–Ω–∏–µ', value: context.description, found: systemPrompt.includes(context.description || '') },
      { field: '–∞–¥—Ä–µ—Å', value: context.address, found: systemPrompt.includes(context.address || '') },
      { field: '—á–∞—Å—ã —Ä–∞–±–æ—Ç—ã', value: context.workingHours, found: systemPrompt.includes(context.workingHours || '') },
      { field: '—Ç–µ–ª–µ—Ñ–æ–Ω', value: context.phone, found: systemPrompt.includes(context.phone || '') },
      { field: 'email', value: context.email, found: systemPrompt.includes(context.email || '') },
      { field: '—É—Å–ª—É–≥–∏', value: '—É—Å–ª—É–≥–∏', found: systemPrompt.includes('–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏') }
    ];

    console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–º–ø—Ç:');
    checks.forEach(check => {
      const status = check.found ? '‚úÖ' : '‚ùå';
      console.log(`  ${status} ${check.field}: ${check.found ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–ù–ï –≤–∫–ª—é—á–µ–Ω–æ'}`);
    });

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìù –†–µ–∑—É–ª—å—Ç–∞—Ç:');
    console.log('  - AI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏');
    console.log('  - –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤–∫–ª—é—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ, –∞–¥—Ä–µ—Å, —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã, –∫–æ–Ω—Ç–∞–∫—Ç—ã');
    console.log('  - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–∞—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç');
    console.log('  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testAIIntegrationWithOrganization();
