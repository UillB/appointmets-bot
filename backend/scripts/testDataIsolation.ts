import { PrismaClient } from '@prisma/client';
import jwt from 'jsonwebtoken';

const prisma = new PrismaClient();
const JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key';

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function createTestToken(userId: number, email: string, name: string, role: string, organizationId: number) {
  return jwt.sign(
    { userId, email, name, role, organizationId },
    JWT_SECRET,
    { expiresIn: '1h' }
  );
}

async function testDataIsolation() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏...\n');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    const organizations = await prisma.organization.findMany({
      include: {
        users: true,
        services: {
          include: {
            appointments: true
          }
        }
      }
    });

    if (organizations.length < 2) {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.');
      return;
    }

    const org1 = organizations[0];
    const org2 = organizations[1];

    console.log(`üìã –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è 1: ${org1.name} (ID: ${org1.id})`);
    console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${org1.users.length}`);
    console.log(`   - –£—Å–ª—É–≥: ${org1.services.length}`);
    console.log(`   - –ó–∞–ø–∏—Å–µ–π: ${org1.services.reduce((sum, s) => sum + s.appointments.length, 0)}`);

    console.log(`üìã –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è 2: ${org2.name} (ID: ${org2.id})`);
    console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${org2.users.length}`);
    console.log(`   - –£—Å–ª—É–≥: ${org2.services.length}`);
    console.log(`   - –ó–∞–ø–∏—Å–µ–π: ${org2.services.reduce((sum, s) => sum + s.appointments.length, 0)}\n`);

    // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
    const user1 = org1.users[0];
    const user2 = org2.users[0];

    if (!user1 || !user2) {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
      return;
    }

    const token1 = createTestToken(user1.id, user1.email, user1.name, user1.role, org1.id);
    const token2 = createTestToken(user2.id, user2.email, user2.name, user2.role, org2.id);

    console.log(`üîë –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã:`);
    console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1: ${user1.email} (Org: ${org1.name})`);
    console.log(`   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2: ${user2.email} (Org: ${org2.name})\n`);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoints
    const baseUrl = 'http://localhost:4000/api';

    // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
    console.log('üß™ –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π —á–µ—Ä–µ–∑ API...');
    
    try {
      const response1 = await fetch(`${baseUrl}/appointments`, {
        headers: {
          'Authorization': `Bearer ${token1}`,
          'Content-Type': 'application/json'
        }
      });
      
      const response2 = await fetch(`${baseUrl}/appointments`, {
        headers: {
          'Authorization': `Bearer ${token2}`,
          'Content-Type': 'application/json'
        }
      });

      if (response1.ok && response2.ok) {
        const data1 = await response1.json();
        const data2 = await response2.json();
        
        console.log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 –≤–∏–¥–∏—Ç ${data1.appointments.length} –∑–∞–ø–∏—Å–µ–π`);
        console.log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2 –≤–∏–¥–∏—Ç ${data2.appointments.length} –∑–∞–ø–∏—Å–µ–π`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º
        const org1Appointments = data1.appointments.filter((apt: any) => 
          apt.service.organizationId === org1.id
        );
        const org2Appointments = data2.appointments.filter((apt: any) => 
          apt.service.organizationId === org2.id
        );
        
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 - Super Admin, –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å –í–°–ï –∑–∞–ø–∏—Å–∏
        if (user1.role === 'SUPER_ADMIN') {
          console.log(`   ‚úÖ Super Admin –≤–∏–¥–∏—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ (${data1.appointments.length} –∑–∞–ø–∏—Å–µ–π)`);
        } else if (org1Appointments.length === data1.appointments.length) {
          console.log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å–≤–æ–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏`);
        } else {
          console.log(`   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 –≤–∏–¥–∏—Ç –∑–∞–ø–∏—Å–∏ –¥—Ä—É–≥–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π!`);
        }
        
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2 - –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏
        if (org2Appointments.length === data2.appointments.length) {
          console.log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2 –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ —Å–≤–æ–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏`);
        } else {
          console.log(`   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2 –≤–∏–¥–∏—Ç –∑–∞–ø–∏—Å–∏ –¥—Ä—É–≥–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π!`);
        }
      } else {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ API: ${response1.status} / ${response2.status}`);
      }
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: ${error}`);
    }

    // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª—É–≥
    console.log('\nüß™ –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª—É–≥ —á–µ—Ä–µ–∑ API...');
    
    try {
      const response1 = await fetch(`${baseUrl}/services`, {
        headers: {
          'Authorization': `Bearer ${token1}`,
          'Content-Type': 'application/json'
        }
      });
      
      const response2 = await fetch(`${baseUrl}/services`, {
        headers: {
          'Authorization': `Bearer ${token2}`,
          'Content-Type': 'application/json'
        }
      });

      if (response1.ok && response2.ok) {
        const data1 = await response1.json();
        const data2 = await response2.json();
        
        console.log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 –≤–∏–¥–∏—Ç ${data1.services.length} —É—Å–ª—É–≥`);
        console.log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2 –≤–∏–¥–∏—Ç ${data2.services.length} —É—Å–ª—É–≥`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å–ª—É–≥–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º
        const org1Services = data1.services.filter((srv: any) => srv.organizationId === org1.id);
        const org2Services = data2.services.filter((srv: any) => srv.organizationId === org2.id);
        
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 - Super Admin, –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å –í–°–ï —É—Å–ª—É–≥–∏
        if (user1.role === 'SUPER_ADMIN') {
          console.log(`   ‚úÖ Super Admin –≤–∏–¥–∏—Ç –≤—Å–µ —É—Å–ª—É–≥–∏ (${data1.services.length} —É—Å–ª—É–≥)`);
        } else if (org1Services.length === data1.services.length) {
          console.log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —É—Å–ª—É–≥–∏ —Å–≤–æ–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏`);
        } else {
          console.log(`   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1 –≤–∏–¥–∏—Ç —É—Å–ª—É–≥–∏ –¥—Ä—É–≥–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π!`);
        }
        
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2 - –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–æ–ª–∂–µ–Ω –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —É—Å–ª—É–≥–∏
        if (org2Services.length === data2.services.length) {
          console.log(`   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2 –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —É—Å–ª—É–≥–∏ —Å–≤–æ–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏`);
        } else {
          console.log(`   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2 –≤–∏–¥–∏—Ç —É—Å–ª—É–≥–∏ –¥—Ä—É–≥–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π!`);
        }
      } else {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ API: ${response1.status} / ${response2.status}`);
      }
    } catch (error) {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: ${error}`);
    }

    console.log('\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('üí° –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, –∏–∑–æ–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testDataIsolation();
