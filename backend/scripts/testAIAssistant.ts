import { PrismaClient } from '@prisma/client';
import { AIService } from '../src/lib/ai/ai-service';

const prisma = new PrismaClient();
const aiService = new AIService();

async function testAIAssistant() {
  try {
    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI –ê–°–°–ò–°–¢–ï–ù–¢–ê –í –¢–ï–°–¢–û–í–û–ú –†–ï–ñ–ò–ú–ï');
    console.log('=' .repeat(60));

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    console.log('\nüìã –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    console.log('-'.repeat(50));
    
    const config = await aiService.getOrganizationAIConfig(2);
    if (!config) {
      console.log('‚ùå AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    console.log('‚úÖ AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞:');
    console.log(`   - Provider: ${config.provider}`);
    console.log(`   - Model: ${config.model}`);
    console.log(`   - Enabled: ${config.enabled}`);

    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º AI —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    console.log('\nüìã –®–ê–ì 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI');
    console.log('-'.repeat(50));
    
    const testMessages = [
      '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?',
      '–ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ —É –≤–∞—Å –µ—Å—Ç—å?',
      '–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –º–∞–Ω–∏–∫—é—Ä?',
      '–í–æ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?',
      '–ú–æ–∂–Ω–æ –ª–∏ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?'
    ];

    for (const message of testMessages) {
      console.log(`\nüß™ –¢–µ—Å—Ç: "${message}"`);
      
      try {
        const conversation = {
          messages: [
            {
              role: 'user' as const,
              content: message
            }
          ],
          context: {
            organizationId: 2,
            organization: {
              name: 'Test Beauty Clinic',
              description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∏–Ω–∏–∫–∞ –∫—Ä–∞—Å–æ—Ç—ã',
              phone: '+7 (495) 123-45-67',
              email: 'info@beauty-clinic.ru'
            }
          }
        };

        const response = await aiService.sendMessage(2, conversation, 'general');
        
        console.log(`   ‚úÖ –û—Ç–≤–µ—Ç: "${response.content}"`);
        console.log(`   üìä –¢–æ–∫–µ–Ω—ã: ${response.usage?.totalTokens || 0}`);
        
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      }
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìã –®–ê–ì 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    console.log('-'.repeat(50));
    
    const stats = await aiService.getAIUsageStats(2);
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:');
    console.log(`   - –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${stats.totalRequests}`);
    console.log(`   - –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: ${stats.totalTokens}`);
    console.log(`   - –°—Ä–µ–¥–Ω–µ–µ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å: ${stats.averageTokensPerRequest}`);

    console.log('\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log('AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testAIAssistant();
