import { PrismaClient } from '@prisma/client';
import { AIService } from '../src/lib/ai/ai-service';
import { AIChatHandler } from '../src/bot/handlers/ai-chat';

const prisma = new PrismaClient();
const aiService = new AIService();

async function testAIBotIntegration() {
  try {
    console.log('ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ Telegram –±–æ—Ç–µ...\n');

    // –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
    const testOrg = await prisma.organization.findFirst({
      where: { name: 'Test AI Organization' }
    });

    if (!testOrg) {
      console.log('‚ùå –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ testAIIntegrationWithOrganization.ts');
      return;
    }

    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:', testOrg.name);

    // –°–æ–∑–¥–∞–µ–º AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å —Ä–µ–∞–ª—å–Ω—ã–º API –∫–ª—é—á–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const apiKey = process.env.OPENAI_API_KEY || 'test-api-key';
    
    const aiConfig = await prisma.organizationAIConfig.upsert({
      where: { organizationId: testOrg.id },
      update: {
        provider: 'openai',
        apiKey: apiKey,
        model: 'gpt-4o-mini',
        maxTokens: 1000,
        temperature: 0.7,
        systemPrompt: '–¢—ã - –≤–µ–∂–ª–∏–≤—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–ª–∏–Ω–∏–∫–∏ –∫—Ä–∞—Å–æ—Ç—ã.',
        enabled: true
      },
      create: {
        organizationId: testOrg.id,
        provider: 'openai',
        apiKey: apiKey,
        model: 'gpt-4o-mini',
        maxTokens: 1000,
        temperature: 0.7,
        systemPrompt: '–¢—ã - –≤–µ–∂–ª–∏–≤—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–ª–∏–Ω–∏–∫–∏ –∫—Ä–∞—Å–æ—Ç—ã.',
        enabled: true
      }
    });

    console.log('‚úÖ AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞');

    // –°–æ–∑–¥–∞–µ–º AI —Ö–µ–Ω–¥–ª–µ—Ä
    const aiHandler = new AIChatHandler();

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    const testScenarios = [
      {
        name: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ',
        message: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?',
        expectedScenario: 'greeting'
      },
      {
        name: '–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å–ª—É–≥–∞—Ö',
        message: '–ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ?',
        expectedScenario: 'service_info'
      },
      {
        name: '–ü–æ–º–æ—â—å —Å –∑–∞–ø–∏—Å—å—é',
        message: '–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞–Ω–∏–∫—é—Ä',
        expectedScenario: 'booking_help'
      },
      {
        name: '–û–±—â–∏–π –≤–æ–ø—Ä–æ—Å',
        message: '–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –º–∞–Ω–∏–∫—é—Ä?',
        expectedScenario: 'general'
      },
      {
        name: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞',
        message: '–£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–ø–∏—Å—å—é',
        expectedScenario: 'support'
      }
    ];

    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...\n');

    for (const scenario of testScenarios) {
      console.log(`üìù –¢–µ—Å—Ç: ${scenario.name}`);
      console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: "${scenario.message}"`);
      
      try {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
        const determinedScenario = (aiHandler as any).determineScenario(scenario.message, {});
        console.log(`   –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: ${determinedScenario}`);
        console.log(`   –û–∂–∏–¥–∞–µ–º—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: ${scenario.expectedScenario}`);
        console.log(`   ‚úÖ ${determinedScenario === scenario.expectedScenario ? '–°–æ–≤–ø–∞–¥–∞–µ—Ç' : '–ù–ï —Å–æ–≤–ø–∞–¥–∞–µ—Ç'}`);

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º AI –æ—Ç–≤–µ—Ç (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π API –∫–ª—é—á)
        if (apiKey !== 'test-api-key') {
          console.log('   ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –æ—Ç–≤–µ—Ç–∞...');
          
          const conversation = {
            messages: [
              {
                role: 'user' as const,
                content: scenario.message
              }
            ]
          };

          const response = await aiService.sendMessage(
            testOrg.id,
            conversation,
            determinedScenario as any
          );

          console.log(`   AI –æ—Ç–≤–µ—Ç: "${response.content.substring(0, 100)}..."`);
          console.log(`   –ú–æ–¥–µ–ª—å: ${response.model}`);
          console.log(`   –¢–æ–∫–µ–Ω—ã: ${response.usage?.totalTokens || 'N/A'}`);
        } else {
          console.log('   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ AI –æ—Ç–≤–µ—Ç–∞ (–Ω–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –∫–ª—é—á–∞)');
        }

      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
      
      console.log('');
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ AI
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ AI...');
    const isActivated = await aiHandler.isAIActivated(testOrg.id);
    console.log(`   AI –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: ${isActivated ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}`);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    console.log('\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è...');
    const stats = await aiHandler.getUsageStats(testOrg.id, 7);
    if (stats) {
      console.log(`   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${stats.totalRequests}`);
      console.log(`   –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: ${stats.totalTokens}`);
      console.log(`   –°—Ä–µ–¥–Ω–µ–µ —Ç–æ–∫–µ–Ω–æ–≤/–∑–∞–ø—Ä–æ—Å: ${stats.averageTokensPerRequest.toFixed(1)}`);
      console.log(`   –ó–∞–ø—Ä–æ—Å—ã –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º:`, stats.requestsByScenario);
    } else {
      console.log('   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìù –†–µ–∑—É–ª—å—Ç–∞—Ç:');
    console.log('  - AI —Ö–µ–Ω–¥–ª–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
    console.log('  - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('  - AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    console.log('  - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞');
    console.log('  - –ì–æ—Ç–æ–≤–æ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ Telegram –±–æ—Ç–∞');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testAIBotIntegration();
