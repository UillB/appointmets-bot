import { PrismaClient } from '@prisma/client';
import { AIService } from '../src/lib/ai/ai-service';
import { AIChatHandler } from '../src/bot/handlers/ai-chat';

const prisma = new PrismaClient();
const aiService = new AIService();

async function testEnhancedAIContext() {
  try {
    console.log('üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û AI –ö–û–ù–¢–ï–ö–°–¢–ê');
    console.log('=' .repeat(60));

    // 1. –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
    console.log('\nüìã –®–ê–ì 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    console.log('-'.repeat(50));
    
    let testOrg = await prisma.organization.findFirst({
      where: { name: 'Enhanced AI Test Organization' }
    });

    if (!testOrg) {
      testOrg = await prisma.organization.create({
        data: {
          name: 'Enhanced AI Test Organization',
          description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∏–Ω–∏–∫–∞ –∫—Ä–∞—Å–æ—Ç—ã —Å –ø–æ–ª–Ω—ã–º —Å–ø–µ–∫—Ç—Ä–æ–º —É—Å–ª—É–≥ –∏ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º',
          address: '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 789, –ú–æ—Å–∫–≤–∞, –º. –¢–µ—Å—Ç–æ–≤–∞—è',
          workingHours: '–ü–Ω-–ü—Ç: 9:00-21:00, –°–±-–í—Å: 10:00-18:00',
          phone: '+7 (495) 123-45-67',
          email: 'info@enhanced-test.ru'
        }
      });
    }

    console.log('‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:', testOrg.name);

    // 2. –°–æ–∑–¥–∞–µ–º —É—Å–ª—É–≥–∏
    let services = await prisma.service.findMany({
      where: { organizationId: testOrg.id }
    });

    if (services.length === 0) {
      services = await Promise.all([
        prisma.service.create({
          data: {
            name: '–ú–∞–Ω–∏–∫—é—Ä –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π',
            nameRu: '–ú–∞–Ω–∏–∫—é—Ä –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π',
            description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫–æ–º',
            descriptionRu: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫–æ–º. –í–∫–ª—é—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∫—É—Ç–∏–∫—É–ª—ã, –ø—Ä–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –Ω–æ–≥—Ç—è–º, –ø–æ–∫—Ä—ã—Ç–∏–µ –≥–µ–ª—å-–ª–∞–∫–æ–º –∏ —É—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π —Ä—É–∫.',
            durationMin: 60,
            organizationId: testOrg.id
          }
        }),
        prisma.service.create({
          data: {
            name: '–ü–µ–¥–∏–∫—é—Ä –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π',
            nameRu: '–ü–µ–¥–∏–∫—é—Ä –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π',
            description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–µ–¥–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º',
            descriptionRu: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–µ–¥–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫–æ–º. –í–∫–ª—é—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç–æ–ø, —É–¥–∞–ª–µ–Ω–∏–µ –º–æ–∑–æ–ª–µ–π, –ø–æ–∫—Ä—ã—Ç–∏–µ –≥–µ–ª—å-–ª–∞–∫–æ–º –∏ –º–∞—Å—Å–∞–∂ –Ω–æ–≥.',
            durationMin: 90,
            organizationId: testOrg.id
          }
        })
      ]);
    }

    console.log('‚úÖ –£—Å–ª—É–≥–∏ —Å–æ–∑–¥–∞–Ω—ã:', services.map(s => s.nameRu || s.name).join(', '));

    // 3. –°–æ–∑–¥–∞–µ–º —Å–ª–æ—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏
    console.log('\nüìã –®–ê–ì 2: –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ—Ç–æ–≤');
    console.log('-'.repeat(50));
    
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    
    // –°–æ–∑–¥–∞–µ–º —Å–ª–æ—Ç—ã –Ω–∞ 7 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
    const slots = [];
    for (let day = 0; day < 7; day++) {
      const currentDay = new Date(today);
      currentDay.setDate(currentDay.getDate() + day);
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ (–¥–µ–Ω—å 0)
      if (currentDay.getDay() === 0) continue;
      
      // –°–æ–∑–¥–∞–µ–º —Å–ª–æ—Ç—ã —Å 10:00 –¥–æ 18:00 —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –≤ 2 —á–∞—Å–∞
      for (let hour = 10; hour < 18; hour += 2) {
        for (const service of services) {
          const startTime = new Date(currentDay);
          startTime.setHours(hour, 0, 0, 0);
          
          const endTime = new Date(startTime);
          endTime.setMinutes(endTime.getMinutes() + service.durationMin);
          
          const slot = await prisma.slot.create({
            data: {
              serviceId: service.id,
              startAt: startTime,
              endAt: endTime,
              capacity: 1
            }
          });
          
          slots.push(slot);
        }
      }
    }

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–ª–æ—Ç–æ–≤: ${slots.length}`);

    // 4. –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π (–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤)
    console.log('\nüìã –®–ê–ì 3: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π');
    console.log('-'.repeat(50));
    
    const appointments = [];
    
    // –ë–µ—Ä–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏
    const slotsToBook = slots.slice(0, 5); // –ë—Ä–æ–Ω–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–ª–æ—Ç–æ–≤
    
    for (let i = 0; i < slotsToBook.length; i++) {
      const slot = slotsToBook[i];
      const statuses = ['confirmed', 'pending', 'confirmed', 'confirmed', 'pending'];
      
      const appointment = await prisma.appointment.create({
        data: {
          chatId: `test_chat_${i + 1}`,
          serviceId: slot.serviceId,
          slotId: slot.id,
          status: statuses[i]
        }
      });
      
      appointments.push(appointment);
    }

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${appointments.length}`);
    console.log('   –°—Ç–∞—Ç—É—Å—ã –∑–∞–ø–∏—Å–µ–π:', appointments.map(a => a.status).join(', '));

    // 5. –°–æ–∑–¥–∞–µ–º AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    console.log('\nüìã –®–ê–ì 4: –°–æ–∑–¥–∞–Ω–∏–µ AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    console.log('-'.repeat(50));
    
    const aiConfig = await prisma.organizationAIConfig.upsert({
      where: { organizationId: testOrg.id },
      update: {
        provider: 'openai',
        apiKey: 'test-api-key',
        model: 'gpt-4o-mini',
        maxTokens: 1500,
        temperature: 0.7,
        systemPrompt: '–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–ª–∏–Ω–∏–∫–∏ –∫—Ä–∞—Å–æ—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–∞—Ö –∏ –∑–∞–ø–∏—Å—è—Ö.',
        enabled: true
      },
      create: {
        organizationId: testOrg.id,
        provider: 'openai',
        apiKey: 'test-api-key',
        model: 'gpt-4o-mini',
        maxTokens: 1500,
        temperature: 0.7,
        systemPrompt: '–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–ª–∏–Ω–∏–∫–∏ –∫—Ä–∞—Å–æ—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–∞—Ö –∏ –∑–∞–ø–∏—Å—è—Ö.',
        enabled: true
      }
    });

    console.log('‚úÖ AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞');

    // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    console.log('\nüìã –®–ê–ì 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞');
    console.log('-'.repeat(50));
    
    const aiHandler = new AIChatHandler();
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const getOrganizationContext = (aiService as any).getOrganizationContext.bind(aiService);
    const context = await getOrganizationContext(testOrg.id);
    
    console.log('‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω:');
    console.log('   - –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:', context.organizationName);
    console.log('   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥:', context.services.length);
    console.log('   - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤:', context.services.reduce((sum: number, s: any) => sum + s.totalSlots, 0));
    console.log('   - –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:', context.services.reduce((sum: number, s: any) => sum + s.availableSlots, 0));
    console.log('   - –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:', context.services.reduce((sum: number, s: any) => sum + s.bookedSlots, 0));
    console.log('   - –ó–∞–ø–∏—Å–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:', context.appointmentStats.todayCount);
    console.log('   - –ó–∞–ø–∏—Å–µ–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞:', context.appointmentStats.tomorrowCount);
    console.log('   - –í—Å–µ–≥–æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö:', context.appointmentStats.totalUpcoming);

    // 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    console.log('\nüìã –®–ê–ì 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞');
    console.log('-'.repeat(50));
    
    const { BaseAIProvider } = await import('../src/lib/ai/base-provider');
    
    class TestAIProvider extends BaseAIProvider {
      name = 'test';
      models = ['test-model'];
      
      async sendMessage() {
        return { content: 'test', model: 'test', provider: 'test' };
      }
      
      validateConfig() {
        return true;
      }
    }
    
    const testProvider = new TestAIProvider();
    const systemPrompt = (testProvider as any).buildSystemPrompt(context);
    
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):');
    console.log('---');
    console.log(systemPrompt.substring(0, 500) + '...');
    console.log('---');
    console.log(`–û–±—â–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: ${systemPrompt.length} —Å–∏–º–≤–æ–ª–æ–≤`);

    // 8. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    console.log('\nüìã –®–ê–ì 7: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
    console.log('-'.repeat(50));
    
    const testScenarios = [
      {
        message: '–ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ —É –≤–∞—Å –µ—Å—Ç—å?',
        expectedScenario: 'service_info',
        description: '–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å–ª—É–≥–∞—Ö'
      },
      {
        message: '–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞–Ω–∏–∫—é—Ä, –∫–æ–≥–¥–∞ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?',
        expectedScenario: 'booking_help',
        description: '–ó–∞–ø—Ä–æ—Å –æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏'
      },
      {
        message: '–°–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è –ø–µ–¥–∏–∫—é—Ä?',
        expectedScenario: 'service_info',
        description: '–í–æ–ø—Ä–æ—Å –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏'
      },
      {
        message: '–ï—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞?',
        expectedScenario: 'booking_help',
        description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å'
      },
      {
        message: '–ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å?',
        expectedScenario: 'support',
        description: '–í–æ–ø—Ä–æ—Å –æ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏'
      }
    ];

    for (const test of testScenarios) {
      console.log(`\nüß™ –¢–µ—Å—Ç: ${test.description}`);
      console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: "${test.message}"`);
      
      const determinedScenario = (aiHandler as any).determineScenario(test.message, {});
      console.log(`   –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: ${determinedScenario}`);
      console.log(`   –û–∂–∏–¥–∞–µ–º—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: ${test.expectedScenario}`);
      console.log(`   ‚úÖ ${determinedScenario === test.expectedScenario ? '–°–æ–≤–ø–∞–¥–∞–µ—Ç' : '–ù–ï —Å–æ–≤–ø–∞–¥–∞–µ—Ç'}`);
    }

    // 9. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–∞—Ö
    console.log('\nüìã –®–ê–ì 8: –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ—Ç–∞—Ö');
    console.log('-'.repeat(50));
    
    context.services.forEach((service: any) => {
      console.log(`\nüìã ${service.name}:`);
      console.log(`   - –í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤: ${service.totalSlots}`);
      console.log(`   - –î–æ—Å—Ç—É–ø–Ω–æ: ${service.availableSlots}`);
      console.log(`   - –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${service.bookedSlots}`);
      
      if (service.slotsByDay && Object.keys(service.slotsByDay).length > 0) {
        console.log(`   - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º:`);
        Object.entries(service.slotsByDay).slice(0, 3).forEach(([date, slots]: [string, any]) => {
          const availableCount = slots.filter((slot: any) => slot.isAvailable).length;
          const totalCount = slots.length;
          const dateObj = new Date(date);
          const dayName = dateObj.toLocaleDateString('ru-RU', { weekday: 'long' });
          console.log(`     * ${dayName} (${date}): ${availableCount}/${totalCount} —Å–≤–æ–±–æ–¥–Ω–æ`);
        });
      }
    });

    // 10. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    console.log('\nüéâ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢');
    console.log('=' .repeat(60));
    console.log('‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π AI –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:');
    console.log('   - AI –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏');
    console.log('   - AI –∑–Ω–∞–µ—Ç –æ –≤—Å–µ—Ö —Å–ª–æ—Ç–∞—Ö –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å–µ');
    console.log('   - AI –≤–∏–¥–∏—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã');
    console.log('   - AI –ø–æ–Ω–∏–º–∞–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –∑–∞–ø–∏—Å–µ–π');
    console.log('   - AI –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º');
    console.log('   - AI –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
    
    console.log('\nüöÄ AI –ê–°–°–ò–°–¢–ï–ù–¢ –ì–û–¢–û–í –ö –£–ú–ù–û–ú–£ –û–ë–©–ï–ù–ò–Æ –° –ö–õ–ò–ï–ù–¢–ê–ú–ò!');
    console.log('\nüìù –ß—Ç–æ —Ç–µ–ø–µ—Ä—å —É–º–µ–µ—Ç AI:');
    console.log('   - –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
    console.log('   - –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –¥–∞—Ç—ã –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –º–µ—Å—Ç');
    console.log('   - –û–±—ä—è—Å–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å—ã –∑–∞–ø–∏—Å–µ–π');
    console.log('   - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–∞—Ö');
    console.log('   - –£—á–∏—Ç—ã–≤–∞—Ç—å —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏');
    console.log('   - –î–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ AI –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testEnhancedAIContext();
