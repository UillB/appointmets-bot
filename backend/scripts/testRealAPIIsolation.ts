import { AIService } from '../src/lib/ai/ai-service';

async function testRealAPIIsolation() {
  console.log('üß™ –¢–ï–°–¢ –ò–ó–û–õ–Ø–¶–ò–ò –° –†–ï–ê–õ–¨–ù–´–ú OPENAI API');
  console.log('=====================================');

  const aiService = new AIService();

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é 2 (Test Beauty Clinic)
  console.log('\nüè¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é 2 (Test Beauty Clinic):');
  try {
    const response1 = await aiService.sendMessage(2, {
      messages: [{ role: 'user', content: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?' }],
      context: {}
    });
    console.log(`   ‚úÖ –û—Ç–≤–µ—Ç: ${response1.content}`);
    console.log(`   üí∞ –¢–æ–∫–µ–Ω—ã: ${response1.usage?.totalTokens || 'N/A'}`);
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é 7 (–°–∞–ª–æ–Ω –†–æ–∑–∞)
  console.log('\nüè¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é 7 (–°–∞–ª–æ–Ω –†–æ–∑–∞):');
  try {
    const response2 = await aiService.sendMessage(7, {
      messages: [{ role: 'user', content: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?' }],
      context: {}
    });
    console.log(`   ‚úÖ –û—Ç–≤–µ—Ç: ${response2.content}`);
    console.log(`   üí∞ –¢–æ–∫–µ–Ω—ã: ${response2.usage?.totalTokens || 'N/A'}`);
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å–ª—É–≥–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ 2
  console.log('\nüè¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å–ª—É–≥–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ 2:');
  try {
    const response3 = await aiService.sendMessage(2, {
      messages: [{ role: 'user', content: '–ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ —É –≤–∞—Å –µ—Å—Ç—å?' }],
      context: {}
    });
    console.log(`   ‚úÖ –û—Ç–≤–µ—Ç: ${response3.content}`);
    console.log(`   üí∞ –¢–æ–∫–µ–Ω—ã: ${response3.usage?.totalTokens || 'N/A'}`);
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å–ª—É–≥–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ 7
  console.log('\nüè¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å–ª—É–≥–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ 7:');
  try {
    const response4 = await aiService.sendMessage(7, {
      messages: [{ role: 'user', content: '–ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ —É –≤–∞—Å –µ—Å—Ç—å?' }],
      context: {}
    });
    console.log(`   ‚úÖ –û—Ç–≤–µ—Ç: ${response4.content}`);
    console.log(`   üí∞ –¢–æ–∫–µ–Ω—ã: ${response4.usage?.totalTokens || 'N/A'}`);
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }

  console.log('\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!');
  console.log('=====================================');
  console.log('‚úÖ –†–µ–∞–ª—å–Ω—ã–π OpenAI API —Ä–∞–±–æ—Ç–∞–µ—Ç');
  console.log('üè¢ –ò–∑–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞');
  console.log('üí∞ –ö–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å —Ç—Ä–∞—Ç–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã');
}

testRealAPIIsolation().catch(console.error);
