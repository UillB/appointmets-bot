import { prisma } from "../src/lib/prisma";

async function main() {
  console.log("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–ª–æ—Ç–æ–≤...");
  
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Å–ª–æ—Ç—ã (–¥–æ –≤—á–µ—Ä–∞)
  const yesterday = new Date();
  yesterday.setDate(yesterday.getDate() - 1);
  yesterday.setUTCHours(23, 59, 59, 999);
  
  const deletedSlots = await prisma.slot.deleteMany({
    where: {
      endAt: { lt: yesterday }
    }
  });
  
  console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deletedSlots.count} —Å—Ç–∞—Ä—ã—Ö —Å–ª–æ—Ç–æ–≤`);
  
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
  const deletedAppointments = await prisma.appointment.deleteMany({
    where: {
      slot: {
        endAt: { lt: yesterday }
      }
    }
  });
  
  console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deletedAppointments.count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
  
  console.log("üìÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤...");
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏
  const services = await prisma.service.findMany();
  if (!services.length) {
    console.log("‚ùå –ù–µ—Ç —É—Å–ª—É–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
    return;
  }
  
  const today = new Date();
  const DAYS_AHEAD = 31; // –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥
  const START_HOUR = 9;   // 9:00 UTC
  const END_HOUR = 18;    // 18:00 UTC
  const STEP_MIN = 30;    // –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
  const CAPACITY = 1;     // –ø–æ 1 —á–µ–ª–æ–≤–µ–∫—É –Ω–∞ —Å–ª–æ—Ç
  
  let totalCreated = 0;
  
  for (const service of services) {
    console.log(`üìã –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –¥–ª—è —É—Å–ª—É–≥–∏: ${service.name}`);
    
    for (let d = 0; d < DAYS_AHEAD; d++) {
      const day = new Date(today);
      day.setUTCDate(day.getUTCDate() + d);
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ (0=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 6=—Å—É–±–±–æ—Ç–∞)
      const dow = day.getUTCDay();
      if (dow === 0 || dow === 6) continue;
      
      const y = day.getUTCFullYear();
      const m = day.getUTCMonth();
      const dd = day.getUTCDate();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–ª–æ—Ç—ã –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
      const dayStart = new Date(Date.UTC(y, m, dd, 0, 0, 0, 0));
      const dayEnd = new Date(Date.UTC(y, m, dd, 23, 59, 59, 999));
      
      const existingSlots = await prisma.slot.findMany({
        where: { 
          serviceId: service.id, 
          startAt: { gte: dayStart, lte: dayEnd } 
        }
      });
      
      if (existingSlots.length > 0) {
        console.log(`  ‚è≠Ô∏è  ${dd}.${m + 1}.${y} - —Å–ª–æ—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç (${existingSlots.length})`);
        continue;
      }
      
      // –°–æ–∑–¥–∞–µ–º —Å–ª–æ—Ç—ã –Ω–∞ –¥–µ–Ω—å
      const slots = [];
      for (let h = START_HOUR; h < END_HOUR; h++) {
        const steps = Math.floor(60 / STEP_MIN);
        for (let idx = 0; idx < steps; idx++) {
          const minute = idx * STEP_MIN;
          
          const startAt = new Date(Date.UTC(y, m, dd, h, minute, 0, 0));
          const endAt = new Date(startAt.getTime() + service.durationMin * 60 * 1000);
          
          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—à–ª–æ–µ –≤—Ä–µ–º—è
          if (endAt <= today) continue;
          
          slots.push({
            serviceId: service.id,
            startAt,
            endAt,
            capacity: CAPACITY
          });
        }
      }
      
      if (slots.length > 0) {
        await prisma.slot.createMany({ data: slots });
        totalCreated += slots.length;
        console.log(`  ‚úÖ ${dd}.${m + 1}.${y} - —Å–æ–∑–¥–∞–Ω–æ ${slots.length} —Å–ª–æ—Ç–æ–≤`);
      }
    }
  }
  
  console.log(`\nüéâ –ì–æ—Ç–æ–≤–æ! –°–æ–∑–¥–∞–Ω–æ ${totalCreated} –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ ${DAYS_AHEAD} –¥–Ω–µ–π`);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const totalSlots = await prisma.slot.count();
  const availableSlots = await prisma.slot.count({
    where: {
      bookings: {
        none: {}
      }
    }
  });
  
  console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`   –í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤: ${totalSlots}`);
  console.log(`   –°–≤–æ–±–æ–¥–Ω—ã—Ö: ${availableSlots}`);
  console.log(`   –ó–∞–Ω—è—Ç—ã—Ö: ${totalSlots - availableSlots}`);
}

main()
  .catch((e) => {
    console.error("‚ùå –û—à–∏–±–∫–∞:", e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });

