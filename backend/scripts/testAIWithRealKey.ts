import { PrismaClient } from '@prisma/client';
import { AIService } from '../src/lib/ai/ai-service';
import { AIChatHandler } from '../src/bot/handlers/ai-chat';

const prisma = new PrismaClient();
const aiService = new AIService();

async function testAIWithRealKey() {
  try {
    console.log('üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI –° –†–ï–ê–õ–¨–ù–´–ú API –ö–õ–Æ–ß–û–ú');
    console.log('=' .repeat(60));

    // 1. –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
    console.log('\nüìã –®–ê–ì 1: –ü–æ–∏—Å–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏');
    console.log('-'.repeat(30));
    
    const testOrg = await prisma.organization.findFirst({
      where: { name: 'Test Beauty Clinic' }
    });

    if (!testOrg) {
      console.log('‚ùå –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:', testOrg.name);
    console.log('   - ID:', testOrg.id);
    console.log('   - –¢–µ–ª–µ—Ñ–æ–Ω:', testOrg.phone);
    console.log('   - Email:', testOrg.email);

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    console.log('\nüìã –®–ê–ì 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    console.log('-'.repeat(30));
    
    const aiConfig = await prisma.organizationAIConfig.findFirst({
      where: { organizationId: testOrg.id }
    });

    if (!aiConfig) {
      console.log('‚ùå AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    console.log('‚úÖ AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞:');
    console.log('   - Provider:', aiConfig.provider);
    console.log('   - Model:', aiConfig.model);
    console.log('   - Enabled:', aiConfig.enabled);
    console.log('   - API Key:', aiConfig.apiKey ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω');

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º AI —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
    console.log('\nüìã –®–ê–ì 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏');
    console.log('-'.repeat(30));
    
    const aiHandler = new AIChatHandler();
    
    const testMessages = [
      {
        message: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ —É –≤–∞—Å –µ—Å—Ç—å?',
        description: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–∞–ø—Ä–æ—Å —É—Å–ª—É–≥'
      },
      {
        message: '–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –º–∞–Ω–∏–∫—é—Ä?',
        description: '–í–æ–ø—Ä–æ—Å –æ —Ü–µ–Ω–µ —É—Å–ª—É–≥–∏'
      },
      {
        message: '–ï—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞?',
        description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤'
      },
      {
        message: '–ú–æ–∂–Ω–æ –ª–∏ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∫–µ–º-—Ç–æ?',
        description: '–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'
      }
    ];

    for (const test of testMessages) {
      console.log(`\nüß™ –¢–µ—Å—Ç: ${test.description}`);
      console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: "${test.message}"`);
      
      try {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        const scenario = (aiHandler as any).determineScenario(test.message, {});
        console.log(`   –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: ${scenario}`);
        
        // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
        const conversation = {
          messages: [
            {
              role: 'user' as const,
              content: test.message
            }
          ]
        };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ AI
        console.log('   ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ AI...');
        const startTime = Date.now();
        
        const response = await aiService.sendMessage(
          testOrg.id,
          conversation,
          scenario as any
        );
        
        const endTime = Date.now();
        const responseTime = endTime - startTime;
        
        console.log(`   ‚úÖ AI –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ ${responseTime}ms`);
        console.log(`   üìù –û—Ç–≤–µ—Ç AI:`);
        console.log(`   "${response.content}"`);
        
        if (response.usage) {
          console.log(`   üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${response.usage.totalTokens}`);
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
        
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: ${error.message}`);
      }
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    console.log('\nüìã –®–ê–ì 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è');
    console.log('-'.repeat(30));
    
    const usageStats = await aiService.getAIUsageStats(testOrg.id);
    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI:');
    console.log('   - –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:', usageStats.totalRequests);
    console.log('   - –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤:', usageStats.totalTokens);
    console.log('   - –°—Ä–µ–¥–Ω–µ–µ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å:', usageStats.averageTokensPerRequest);
    console.log('   - –ó–∞–ø—Ä–æ—Å—ã –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º:', JSON.stringify(usageStats.requestsByScenario, null, 2));

    // 5. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    console.log('\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
    console.log('=' .repeat(60));
    console.log('‚úÖ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º OpenAI API!');
    console.log('   - API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('   - AI –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã');
    console.log('   - –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('   - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–µ–¥–µ—Ç—Å—è');
    console.log('   - –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç');
    
    console.log('\nüöÄ AI –ê–°–°–ò–°–¢–ï–ù–¢ –ì–û–¢–û–í –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ AI:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testAIWithRealKey();
