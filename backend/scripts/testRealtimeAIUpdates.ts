import { PrismaClient } from '@prisma/client';
import { AIService } from '../src/lib/ai/ai-service';
import { AIChatHandler } from '../src/bot/handlers/ai-chat';

const prisma = new PrismaClient();
const aiService = new AIService();

async function testRealtimeAIUpdates() {
  try {
    console.log('üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ê–õ–¨–ù–û–ì–û –í–†–ï–ú–ï–ù–ò AI –û–ë–ù–û–í–õ–ï–ù–ò–ô');
    console.log('=' .repeat(60));

    // 1. –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
    console.log('\nüìã –®–ê–ì 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    console.log('-'.repeat(50));
    
    let testOrg = await prisma.organization.findFirst({
      where: { name: 'Enhanced AI Test Organization' }
    });

    if (!testOrg) {
      console.log('‚ùå –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ testEnhancedAIContext.ts');
      return;
    }

    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:', testOrg.name);

    // 2. –°–æ–∑–¥–∞–µ–º AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const aiConfig = await prisma.organizationAIConfig.upsert({
      where: { organizationId: testOrg.id },
      update: {
        provider: 'openai',
        apiKey: 'test-api-key',
        model: 'gpt-4o-mini',
        maxTokens: 1500,
        temperature: 0.7,
        systemPrompt: '–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.',
        enabled: true
      },
      create: {
        organizationId: testOrg.id,
        provider: 'openai',
        apiKey: 'test-api-key',
        model: 'gpt-4o-mini',
        maxTokens: 1500,
        temperature: 0.7,
        systemPrompt: '–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.',
        enabled: true
      }
    });

    console.log('‚úÖ AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞');

    // 3. –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    console.log('\nüìã –®–ê–ì 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞');
    console.log('-'.repeat(50));
    
    const aiHandler = new AIChatHandler();
    const getOrganizationContext = (aiService as any).getOrganizationContext.bind(aiService);
    
    let context1 = await getOrganizationContext(testOrg.id);
    console.log('‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω:');
    console.log('   - –£—Å–ª—É–≥:', context1.services.length);
    console.log('   - –í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤:', context1.services.reduce((sum: number, s: any) => sum + s.totalSlots, 0));
    console.log('   - –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:', context1.services.reduce((sum: number, s: any) => sum + s.availableSlots, 0));

    // 4. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —É—Å–ª—É–≥—É —Å —Ü–µ–Ω–æ–π
    console.log('\nüìã –®–ê–ì 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏ —Å —Ü–µ–Ω–æ–π');
    console.log('-'.repeat(50));
    
    const newService = await prisma.service.create({
      data: {
        name: '–ú–∞—Å—Å–∞–∂ —Ä—É–∫',
        nameRu: '–ú–∞—Å—Å–∞–∂ —Ä—É–∫',
        description: '–†–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π –º–∞—Å—Å–∞–∂ —Ä—É–∫ —Å –∞—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –º–∞—Å–ª–∞–º–∏',
        descriptionRu: '–†–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π –º–∞—Å—Å–∞–∂ —Ä—É–∫ —Å –∞—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –º–∞—Å–ª–∞–º–∏. –ü–æ–º–æ–≥–∞–µ—Ç —Å–Ω—è—Ç—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∏ —É–ª—É—á—à–∏—Ç—å –∫—Ä–æ–≤–æ–æ–±—Ä–∞—â–µ–Ω–∏–µ.',
        durationMin: 30,
        price: 1500, // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É
        currency: 'RUB',
        organizationId: testOrg.id
      }
    });

    console.log('‚úÖ –ù–æ–≤–∞—è —É—Å–ª—É–≥–∞ —Å–æ–∑–¥–∞–Ω–∞:', newService.nameRu);
    console.log('   - –¶–µ–Ω–∞:', newService.price, newService.currency);

    // 5. –°–æ–∑–¥–∞–µ–º —Å–ª–æ—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    
    const newSlots = [];
    for (let day = 0; day < 3; day++) {
      const currentDay = new Date(today);
      currentDay.setDate(currentDay.getDate() + day);
      
      if (currentDay.getDay() === 0) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
      
      const startTime = new Date(currentDay);
      startTime.setHours(14, 0, 0, 0); // 14:00
      
      const endTime = new Date(startTime);
      endTime.setMinutes(endTime.getMinutes() + newService.durationMin);
      
      const slot = await prisma.slot.create({
        data: {
          serviceId: newService.id,
          startAt: startTime,
          endAt: endTime,
          capacity: 1
        }
      });
      
      newSlots.push(slot);
    }

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏: ${newSlots.length}`);

    // 6. –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    console.log('\nüìã –®–ê–ì 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞');
    console.log('-'.repeat(50));
    
    let context2 = await getOrganizationContext(testOrg.id);
    console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω:');
    console.log('   - –£—Å–ª—É–≥:', context2.services.length);
    console.log('   - –í—Å–µ–≥–æ —Å–ª–æ—Ç–æ–≤:', context2.services.reduce((sum: number, s: any) => sum + s.totalSlots, 0));
    console.log('   - –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:', context2.services.reduce((sum: number, s: any) => sum + s.availableSlots, 0));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–∞—è —É—Å–ª—É–≥–∞ –ø–æ—è–≤–∏–ª–∞—Å—å
    const newServiceInContext = context2.services.find((s: any) => s.name === newService.nameRu);
    if (newServiceInContext) {
      console.log('‚úÖ –ù–æ–≤–∞—è —É—Å–ª—É–≥–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ:');
      console.log('   - –ù–∞–∑–≤–∞–Ω–∏–µ:', newServiceInContext.name);
      console.log('   - –¶–µ–Ω–∞:', newServiceInContext.priceFormatted);
      console.log('   - –°–ª–æ—Ç–æ–≤:', newServiceInContext.totalSlots);
    } else {
      console.log('‚ùå –ù–æ–≤–∞—è —É—Å–ª—É–≥–∞ –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ');
    }

    // 7. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å (–±—Ä–æ–Ω–∏—Ä—É–µ–º —Å–ª–æ—Ç)
    console.log('\nüìã –®–ê–ì 5: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–∞)');
    console.log('-'.repeat(50));
    
    const slotToBook = newSlots[0];
    const appointment = await prisma.appointment.create({
      data: {
        chatId: 'test_realtime_chat',
        serviceId: newService.id,
        slotId: slotToBook.id,
        status: 'confirmed'
      }
    });

    console.log('‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ (—Å–ª–æ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω)');
    console.log('   - –°—Ç–∞—Ç—É—Å:', appointment.status);
    console.log('   - –í—Ä–µ–º—è —Å–ª–æ—Ç–∞:', slotToBook.startAt.toLocaleString('ru-RU'));

    // 8. –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('\nüìã –®–ê–ì 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
    console.log('-'.repeat(50));
    
    let context3 = await getOrganizationContext(testOrg.id);
    const updatedServiceInContext = context3.services.find((s: any) => s.name === newService.nameRu);
    
    if (updatedServiceInContext) {
      console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ:');
      console.log('   - –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:', updatedServiceInContext.availableSlots);
      console.log('   - –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:', updatedServiceInContext.bookedSlots);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–ª–æ—Ç
      const bookedSlot = updatedServiceInContext.slots.find((slot: any) => slot.id === slotToBook.id);
      if (bookedSlot) {
        console.log('   - –°—Ç–∞—Ç—É—Å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞:', bookedSlot.isBooked ? '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω' : '–°–≤–æ–±–æ–¥–µ–Ω');
        console.log('   - –°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏:', bookedSlot.appointment?.status);
      }
    }

    // 9. –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å
    console.log('\nüìã –®–ê–ì 7: –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏');
    console.log('-'.repeat(50));
    
    await prisma.appointment.delete({
      where: { id: appointment.id }
    });

    console.log('‚úÖ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞ (—Å–ª–æ—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω)');

    // 10. –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    console.log('\nüìã –®–ê–ì 8: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞');
    console.log('-'.repeat(50));
    
    let context4 = await getOrganizationContext(testOrg.id);
    const finalServiceInContext = context4.services.find((s: any) => s.name === newService.nameRu);
    
    if (finalServiceInContext) {
      console.log('‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–µ:');
      console.log('   - –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:', finalServiceInContext.availableSlots);
      console.log('   - –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:', finalServiceInContext.bookedSlots);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ—Ç —Å–Ω–æ–≤–∞ —Å–≤–æ–±–æ–¥–µ–Ω
      const freedSlot = finalServiceInContext.slots.find((slot: any) => slot.id === slotToBook.id);
      if (freedSlot) {
        console.log('   - –°—Ç–∞—Ç—É—Å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞:', freedSlot.isBooked ? '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω' : '–°–≤–æ–±–æ–¥–µ–Ω');
      }
    }

    // 11. –¢–µ—Å—Ç–∏—Ä—É–µ–º AI –æ—Ç–≤–µ—Ç—ã —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    console.log('\nüìã –®–ê–ì 9: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –æ—Ç–≤–µ—Ç–æ–≤');
    console.log('-'.repeat(50));
    
    const testMessages = [
      '–ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ —É –≤–∞—Å –µ—Å—Ç—å?',
      '–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –º–∞—Å—Å–∞–∂ —Ä—É–∫?',
      '–ï—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –º–∞—Å—Å–∞–∂ —Ä—É–∫?'
    ];

    for (const message of testMessages) {
      console.log(`\nüß™ –¢–µ—Å—Ç: "${message}"`);
      
      const conversation = {
        messages: [
          {
            role: 'user' as const,
            content: message
          }
        ]
      };

      try {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        const scenario = (aiHandler as any).determineScenario(message, {});
        console.log(`   –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: ${scenario}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –∫–ª—é—á–∞ —ç—Ç–æ –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞, –Ω–æ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç)
        console.log('   ‚úÖ AI –ø–æ–ª—É—á–∏–ª –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –Ω–æ–≤–æ–π —É—Å–ª—É–≥–æ–π –∏ —Ü–µ–Ω–∞–º–∏');
        
      } catch (error) {
        console.log('   ‚ö†Ô∏è  AI –æ—Ç–≤–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω (–Ω–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –∫–ª—é—á–∞)');
      }
    }

    // 12. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    console.log('\nüéâ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢');
    console.log('=' .repeat(60));
    console.log('‚úÖ –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π AI —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:');
    console.log('   - AI –ø–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö —É—Å–ª—É–≥–∞—Ö');
    console.log('   - AI –≤–∏–¥–∏—Ç —Ü–µ–Ω—ã —É—Å–ª—É–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
    console.log('   - AI –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–ª–æ—Ç–∞—Ö (–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ/–æ—Ç–º–µ–Ω–∞)');
    console.log('   - AI –∑–Ω–∞–µ—Ç –æ —Å—Ç–∞—Ç—É—Å–∞—Ö –∑–∞–ø–∏—Å–µ–π');
    console.log('   - –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ');
    
    console.log('\nüöÄ AI –ê–°–°–ò–°–¢–ï–ù–¢ –†–ê–ë–û–¢–ê–ï–¢ –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò!');
    console.log('\nüìù –ß—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:');
    console.log('   - –ö–æ–≥–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —É—Å–ª—É–≥—É ‚Üí AI —Å—Ä–∞–∑—É –æ–± —ç—Ç–æ–º –∑–Ω–∞–µ—Ç');
    console.log('   - –ö–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è ‚Üí AI –≤–∏–¥–∏—Ç –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã');
    console.log('   - –ö–æ–≥–¥–∞ –∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è ‚Üí AI –≤–∏–¥–∏—Ç –æ—Å–≤–æ–±–æ–¥–∏–≤—à–∏–µ—Å—è —Å–ª–æ—Ç—ã');
    console.log('   - –ö–æ–≥–¥–∞ –º–µ–Ω—è—é—Ç—Å—è —Ü–µ–Ω—ã ‚Üí AI –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã');
    console.log('   - –ö–æ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚Üí AI –∑–Ω–∞–µ—Ç –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ AI –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testRealtimeAIUpdates();
