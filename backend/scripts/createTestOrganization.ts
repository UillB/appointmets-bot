import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function createTestOrganization() {
  console.log('üè¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è AI —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...\n');

  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
    const organization = await prisma.organization.create({
      data: {
        name: 'AI Test Organization',
        avatar: 'https://via.placeholder.com/150x150/667eea/ffffff?text=AI'
      }
    });

    console.log(`‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${organization.name} (ID: ${organization.id})`);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.create({
      data: {
        email: 'ai-test@example.com',
        password: 'hashed-password', // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–æ
        name: 'AI Test User',
        role: 'OWNER',
        organizationId: organization.id
      }
    });

    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${user.name} (${user.email})`);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —É—Å–ª—É–≥—É
    const service = await prisma.service.create({
      data: {
        name: 'AI Consultation',
        nameRu: 'AI –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
        nameEn: 'AI Consultation',
        nameHe: '◊ô◊ô◊¢◊ï◊• AI',
        description: 'AI-powered consultation service',
        descriptionRu: '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò',
        descriptionEn: 'AI-powered consultation service',
        descriptionHe: '◊©◊ô◊®◊ï◊™ ◊ô◊ô◊¢◊ï◊• ◊û◊ë◊ï◊°◊° AI',
        durationMin: 30,
        organizationId: organization.id
      }
    });

    console.log(`‚úÖ –£—Å–ª—É–≥–∞ —Å–æ–∑–¥–∞–Ω–∞: ${service.nameRu || service.name}`);

    console.log('\nüéØ –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –¥–ª—è AI —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!');
    console.log(`üìã ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: ${organization.id}`);
    console.log(`üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.id}`);
    console.log(`üîß ID —É—Å–ª—É–≥–∏: ${service.id}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
createTestOrganization();
