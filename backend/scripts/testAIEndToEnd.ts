import { PrismaClient } from '@prisma/client';
import { AIService } from '../src/lib/ai/ai-service';
import { AIChatHandler } from '../src/bot/handlers/ai-chat';
import { botManager } from '../src/bot/bot-manager';

const prisma = new PrismaClient();
const aiService = new AIService();

async function testAIEndToEnd() {
  try {
    console.log('üöÄ –ü–û–õ–ù–û–ï END-TO-END –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI –ò–ù–¢–ï–ì–†–ê–¶–ò–ò\n');
    console.log('=' .repeat(60));

    // 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    console.log('\nüìã –®–ê–ì 1: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏');
    console.log('-'.repeat(50));
    
    let testOrg = await prisma.organization.findFirst({
      where: { name: 'End-to-End Test Organization' }
    });

    if (!testOrg) {
      testOrg = await prisma.organization.create({
        data: {
          name: 'End-to-End Test Organization',
          description: '–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–ª–∏–Ω–∏–∫–∞ –∫—Ä–∞—Å–æ—Ç—ã —Å AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º',
          address: '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 456, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
          workingHours: '–ü–Ω-–í—Å: 8:00-22:00',
          phone: '+7 (812) 987-65-43',
          email: 'info@testclinic-spb.ru'
        }
      });
    }

    console.log('‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:', testOrg.name);
    console.log('   - –û–ø–∏—Å–∞–Ω–∏–µ:', testOrg.description);
    console.log('   - –ê–¥—Ä–µ—Å:', testOrg.address);
    console.log('   - –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:', testOrg.workingHours);
    console.log('   - –¢–µ–ª–µ—Ñ–æ–Ω:', testOrg.phone);
    console.log('   - Email:', testOrg.email);

    // 2. –°–æ–∑–¥–∞–µ–º —É—Å–ª—É–≥–∏
    console.log('\nüìã –®–ê–ì 2: –°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª—É–≥');
    console.log('-'.repeat(50));
    
    let services = await prisma.service.findMany({
      where: { organizationId: testOrg.id }
    });

    if (services.length === 0) {
      services = await Promise.all([
        prisma.service.create({
          data: {
            name: '–ú–∞–Ω–∏–∫—é—Ä –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π',
            nameRu: '–ú–∞–Ω–∏–∫—é—Ä –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π',
            description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º',
            descriptionRu: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫–æ–º. –í–∫–ª—é—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∫—É—Ç–∏–∫—É–ª—ã, –ø—Ä–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –Ω–æ–≥—Ç—è–º –∏ –ø–æ–∫—Ä—ã—Ç–∏–µ –≥–µ–ª—å-–ª–∞–∫–æ–º.',
            durationMin: 60,
            organizationId: testOrg.id
          }
        }),
        prisma.service.create({
          data: {
            name: '–ü–µ–¥–∏–∫—é—Ä –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π',
            nameRu: '–ü–µ–¥–∏–∫—é—Ä –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π',
            description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–µ–¥–∏–∫—é—Ä',
            descriptionRu: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–µ–¥–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º. –í–∫–ª—é—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç–æ–ø, —É–¥–∞–ª–µ–Ω–∏–µ –º–æ–∑–æ–ª–µ–π –∏ –ø–æ–∫—Ä—ã—Ç–∏–µ –≥–µ–ª—å-–ª–∞–∫–æ–º.',
            durationMin: 90,
            organizationId: testOrg.id
          }
        }),
        prisma.service.create({
          data: {
            name: '–ú–∞—Å—Å–∞–∂ —Ä—É–∫',
            nameRu: '–ú–∞—Å—Å–∞–∂ —Ä—É–∫',
            description: '–†–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π –º–∞—Å—Å–∞–∂ —Ä—É–∫',
            descriptionRu: '–†–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π –º–∞—Å—Å–∞–∂ —Ä—É–∫ —Å –∞—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –º–∞—Å–ª–∞–º–∏. –ü–æ–º–æ–≥–∞–µ—Ç —Å–Ω—è—Ç—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∏ —É–ª—É—á—à–∏—Ç—å –∫—Ä–æ–≤–æ–æ–±—Ä–∞—â–µ–Ω–∏–µ.',
            durationMin: 30,
            organizationId: testOrg.id
          }
        })
      ]);
    }

    console.log('‚úÖ –£—Å–ª—É–≥–∏ —Å–æ–∑–¥–∞–Ω—ã:');
    services.forEach(service => {
      console.log(`   - ${service.nameRu || service.name} (${service.durationMin} –º–∏–Ω)`);
    });

    // 3. –°–æ–∑–¥–∞–µ–º AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    console.log('\nüìã –®–ê–ì 3: –°–æ–∑–¥–∞–Ω–∏–µ AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
    console.log('-'.repeat(50));
    
    const apiKey = process.env.OPENAI_API_KEY || 'test-api-key';
    
    const aiConfig = await prisma.organizationAIConfig.upsert({
      where: { organizationId: testOrg.id },
      update: {
        provider: 'openai',
        apiKey: apiKey,
        model: 'gpt-4o-mini',
        maxTokens: 1000,
        temperature: 0.7,
        systemPrompt: '–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–ª–∏–Ω–∏–∫–∏ –∫—Ä–∞—Å–æ—Ç—ã. –ë—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º.',
        customPrompts: JSON.stringify({
          greeting: '–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –∫–ª–∏–Ω–∏–∫—É –∫—Ä–∞—Å–æ—Ç—ã! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –∑–∞–ø–∏—Å—å—é –∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.',
          bookingHelp: '–ü–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é —É—Å–ª—É–≥—É –∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏. –£ –Ω–∞—Å –µ—Å—Ç—å –º–∞–Ω–∏–∫—é—Ä, –ø–µ–¥–∏–∫—é—Ä –∏ –º–∞—Å—Å–∞–∂ —Ä—É–∫.',
          serviceInfo: '–†–∞—Å—Å–∫–∞–∂—É –ø–æ–¥—Ä–æ–±–Ω–æ –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö, –∏—Ö –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è—Ö.',
          support: '–ü–æ–º–æ–≥—É —Ä–µ—à–∏—Ç—å –ª—é–±—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –≤–æ–ø—Ä–æ—Å—ã. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –¥–∞–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏.'
        }),
        enabled: true
      },
      create: {
        organizationId: testOrg.id,
        provider: 'openai',
        apiKey: apiKey,
        model: 'gpt-4o-mini',
        maxTokens: 1000,
        temperature: 0.7,
        systemPrompt: '–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–ª–∏–Ω–∏–∫–∏ –∫—Ä–∞—Å–æ—Ç—ã. –ë—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º.',
        customPrompts: JSON.stringify({
          greeting: '–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –∫–ª–∏–Ω–∏–∫—É –∫—Ä–∞—Å–æ—Ç—ã! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –∑–∞–ø–∏—Å—å—é –∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.',
          bookingHelp: '–ü–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é —É—Å–ª—É–≥—É –∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏. –£ –Ω–∞—Å –µ—Å—Ç—å –º–∞–Ω–∏–∫—é—Ä, –ø–µ–¥–∏–∫—é—Ä –∏ –º–∞—Å—Å–∞–∂ —Ä—É–∫.',
          serviceInfo: '–†–∞—Å—Å–∫–∞–∂—É –ø–æ–¥—Ä–æ–±–Ω–æ –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö, –∏—Ö –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è—Ö.',
          support: '–ü–æ–º–æ–≥—É —Ä–µ—à–∏—Ç—å –ª—é–±—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –≤–æ–ø—Ä–æ—Å—ã. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –¥–∞–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏.'
        }),
        enabled: true
      }
    });

    console.log('‚úÖ AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:');
    console.log('   - –ü—Ä–æ–≤–∞–π–¥–µ—Ä:', aiConfig.provider);
    console.log('   - –ú–æ–¥–µ–ª—å:', aiConfig.model);
    console.log('   - –ú–∞–∫—Å —Ç–æ–∫–µ–Ω–æ–≤:', aiConfig.maxTokens);
    console.log('   - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:', aiConfig.temperature);
    console.log('   - –í–∫–ª—é—á–µ–Ω:', aiConfig.enabled ? '–î–∞' : '–ù–µ—Ç');

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º AI —Å–µ—Ä–≤–∏—Å
    console.log('\nüìã –®–ê–ì 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —Å–µ—Ä–≤–∏—Å–∞');
    console.log('-'.repeat(50));
    
    const aiHandler = new AIChatHandler();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    const getOrganizationContext = (aiService as any).getOrganizationContext.bind(aiService);
    const context = await getOrganizationContext(testOrg.id);
    
    console.log('‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω:');
    console.log('   - –ù–∞–∑–≤–∞–Ω–∏–µ:', context.organizationName);
    console.log('   - –û–ø–∏—Å–∞–Ω–∏–µ:', context.description);
    console.log('   - –ê–¥—Ä–µ—Å:', context.address);
    console.log('   - –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:', context.workingHours);
    console.log('   - –¢–µ–ª–µ—Ñ–æ–Ω:', context.phone);
    console.log('   - Email:', context.email);
    console.log('   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥:', context.services.length);

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ AI
    console.log('\nüìã –®–ê–ì 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤');
    console.log('-'.repeat(50));
    
    const testMessages = [
      { message: '–ü—Ä–∏–≤–µ—Ç!', scenario: 'greeting' },
      { message: '–ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ —É –≤–∞—Å –µ—Å—Ç—å?', scenario: 'service_info' },
      { message: '–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞–Ω–∏–∫—é—Ä', scenario: 'booking_help' },
      { message: '–°–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è –ø–µ–¥–∏–∫—é—Ä?', scenario: 'service_info' },
      { message: '–£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–ø–∏—Å—å—é', scenario: 'support' }
    ];

    for (const test of testMessages) {
      console.log(`\nüß™ –¢–µ—Å—Ç: "${test.message}"`);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
      const determinedScenario = (aiHandler as any).determineScenario(test.message, {});
      console.log(`   –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: ${determinedScenario}`);
      console.log(`   –û–∂–∏–¥–∞–µ–º—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: ${test.scenario}`);
      console.log(`   ‚úÖ ${determinedScenario === test.scenario ? '–°–æ–≤–ø–∞–¥–∞–µ—Ç' : '–ù–ï —Å–æ–≤–ø–∞–¥–∞–µ—Ç'}`);

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º AI –æ—Ç–≤–µ—Ç (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π API –∫–ª—é—á)
      if (apiKey !== 'test-api-key') {
        try {
          const conversation = {
            messages: [
              {
                role: 'user' as const,
                content: test.message
              }
            ]
          };

          const response = await aiService.sendMessage(
            testOrg.id,
            conversation,
            determinedScenario as any
          );

          console.log(`   ü§ñ AI –æ—Ç–≤–µ—Ç: "${response.content.substring(0, 150)}..."`);
          console.log(`   üìä –¢–æ–∫–µ–Ω—ã: ${response.usage?.totalTokens || 'N/A'}`);
          
          // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
          await aiService.logUsage(
            testOrg.id,
            response.usage?.totalTokens || 0,
            determinedScenario as any,
            response.model
          );
          
        } catch (error) {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞ AI: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        }
      } else {
        console.log('   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫ AI –æ—Ç–≤–µ—Ç–∞ (–Ω–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –∫–ª—é—á–∞)');
      }
    }

    // 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìã –®–ê–ì 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    console.log('-'.repeat(50));
    
    const stats = await aiHandler.getUsageStats(testOrg.id, 7);
    if (stats) {
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:');
      console.log('   - –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤:', stats.totalRequests);
      console.log('   - –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤:', stats.totalTokens);
      console.log('   - –°—Ä–µ–¥–Ω–µ–µ —Ç–æ–∫–µ–Ω–æ–≤/–∑–∞–ø—Ä–æ—Å:', stats.averageTokensPerRequest.toFixed(1));
      console.log('   - –ó–∞–ø—Ä–æ—Å—ã –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º:', stats.requestsByScenario);
    }

    // 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º Bot Manager
    console.log('\nüìã –®–ê–ì 7: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Bot Manager');
    console.log('-'.repeat(50));
    
    const isAIActivated = await botManager.isAIActivated(testOrg.id);
    console.log('‚úÖ AI –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ Bot Manager:', isAIActivated ? '–î–∞' : '–ù–µ—Ç');
    
    const aiHandlerFromManager = botManager.getAIHandler(testOrg.id);
    console.log('‚úÖ AI —Ö–µ–Ω–¥–ª–µ—Ä –ø–æ–ª—É—á–µ–Ω –∏–∑ Bot Manager:', aiHandlerFromManager ? '–î–∞' : '–ù–µ—Ç');

    // 8. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    console.log('\nüéâ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢');
    console.log('=' .repeat(60));
    console.log('‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:');
    console.log('   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, —É—Å–ª—É–≥–∏, AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è');
    console.log('   - AI —Å–µ—Ä–≤–∏—Å: –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π');
    console.log('   - AI —Ö–µ–Ω–¥–ª–µ—Ä: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤, –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π');
    console.log('   - Bot Manager: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è AI –≤ Telegram –±–æ—Ç–∞');
    console.log('   - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    
    console.log('\nüöÄ AI –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!');
    console.log('\nüìù –ß—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:');
    console.log('   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏');
    console.log('   - –£–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π');
    console.log('   - –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π');
    console.log('   - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
    console.log('   - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ Telegram –±–æ—Ç–∞');
    console.log('   - Fallback –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ AI');
    
    console.log('\nüéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('   1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å OpenAI API –∫–ª—é—á –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏');
    console.log('   2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º Telegram –±–æ—Ç–æ–º');
    console.log('   3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ end-to-end —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testAIEndToEnd();
