import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function testIsolation() {
  try {
    console.log('üîí Testing organization isolation...');

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    console.log('\n1. Testing user-organization isolation:');
    
    const users = await prisma.user.findMany({
      include: {
        organization: true
      }
    });

    for (const user of users) {
      console.log(`üë§ ${user.name} (${user.email}) - Org: ${user.organization.name} (ID: ${user.organizationId})`);
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å–ª—É–≥–∏ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º
    console.log('\n2. Testing service-organization isolation:');
    
    const services = await prisma.service.findMany({
      include: {
        organization: true
      }
    });

    const servicesByOrg = services.reduce((acc, service) => {
      if (!acc[service.organizationId]) {
        acc[service.organizationId] = [];
      }
      acc[service.organizationId].push(service);
      return acc;
    }, {} as Record<number, any[]>);

    for (const [orgId, orgServices] of Object.entries(servicesByOrg)) {
      const org = await prisma.organization.findUnique({ where: { id: parseInt(orgId) } });
      console.log(`\nüè¢ ${org?.name} (ID: ${orgId}):`);
      for (const service of orgServices) {
        console.log(`  - ${service.name} (${service.durationMin} min)`);
      }
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ—Ç—ã –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —É—Å–ª—É–≥–∞–º
    console.log('\n3. Testing slot-service isolation:');
    
    const slots = await prisma.slot.findMany({
      include: {
        service: {
          include: {
            organization: true
          }
        }
      }
    });

    const slotsByOrg = slots.reduce((acc, slot) => {
      const orgId = slot.service.organizationId;
      if (!acc[orgId]) {
        acc[orgId] = [];
      }
      acc[orgId].push(slot);
      return acc;
    }, {} as Record<number, any[]>);

    for (const [orgId, orgSlots] of Object.entries(slotsByOrg)) {
      const org = await prisma.organization.findUnique({ where: { id: parseInt(orgId) } });
      console.log(`\nüè¢ ${org?.name} (ID: ${orgId}):`);
      console.log(`  üìÖ Total slots: ${orgSlots.length}`);
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Å–ª—É–≥–∞–º
      const slotsByService = orgSlots.reduce((acc, slot) => {
        const serviceName = slot.service.name;
        if (!acc[serviceName]) {
          acc[serviceName] = 0;
        }
        acc[serviceName]++;
        return acc;
      }, {} as Record<string, number>);

      for (const [serviceName, count] of Object.entries(slotsByService)) {
        console.log(`    - ${serviceName}: ${count} slots`);
      }
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç—ã –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º
    console.log('\n4. Testing bot-organization isolation:');
    
    const orgsWithBots = await prisma.organization.findMany({
      where: {
        botToken: { not: null }
      },
      select: {
        id: true,
        name: true,
        botToken: true,
        botUsername: true
      }
    });

    if (orgsWithBots.length === 0) {
      console.log('  ü§ñ No bots configured yet');
    } else {
      for (const org of orgsWithBots) {
        console.log(`  ü§ñ ${org.name}: ${org.botUsername || 'No username'} (Token: ${org.botToken?.slice(0, 10)}...)`);
      }
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\n5. Testing user roles:');
    
    const usersByRole = users.reduce((acc, user) => {
      if (!acc[user.role]) {
        acc[user.role] = [];
      }
      acc[user.role].push(user);
      return acc;
    }, {} as Record<string, any[]>);

    for (const [role, roleUsers] of Object.entries(usersByRole)) {
      console.log(`\nüë• ${role}:`);
      for (const user of roleUsers) {
        console.log(`  - ${user.name} (${user.email}) - Org: ${user.organization.name}`);
      }
    }

    console.log('\n‚úÖ Isolation test completed successfully!');
    console.log('\nüìä Summary:');
    console.log(`- Total organizations: ${await prisma.organization.count()}`);
    console.log(`- Total users: ${await prisma.user.count()}`);
    console.log(`- Total services: ${await prisma.service.count()}`);
    console.log(`- Total slots: ${await prisma.slot.count()}`);
    console.log(`- Organizations with bots: ${orgsWithBots.length}`);

  } catch (error) {
    console.error('‚ùå Error testing isolation:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testIsolation();
