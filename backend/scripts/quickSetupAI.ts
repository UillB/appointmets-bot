import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function quickSetupAI() {
  try {
    console.log('üöÄ –ë–´–°–¢–†–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê AI –ê–°–°–ò–°–¢–ï–ù–¢–ê');
    console.log('=' .repeat(50));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API –∫–ª—é—á –ø–µ—Ä–µ–¥–∞–Ω
    const apiKey = process.env.OPENAI_API_KEY;
    if (!apiKey) {
      console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      console.log('üìù –ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å API –∫–ª—é—á–æ–º:');
      console.log('   OPENAI_API_KEY=sk-your-key-here npx tsx scripts/quickSetupAI.ts');
      return;
    }

    console.log('‚úÖ OpenAI API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω:', apiKey.substring(0, 10) + '...');

    // 1. –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–µ—Å—Ç–æ–≤—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
    console.log('\nüìã –®–ê–ì 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏');
    console.log('-'.repeat(30));
    
    let testOrg = await prisma.organization.findFirst({
      where: { name: 'Quick AI Test Organization' }
    });

    if (!testOrg) {
      testOrg = await prisma.organization.create({
        data: {
          name: 'Quick AI Test Organization',
          description: '–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞',
          address: '—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 123, –ú–æ—Å–∫–≤–∞',
          workingHours: '–ü–Ω-–ü—Ç: 9:00-18:00, –°–±-–í—Å: 10:00-16:00',
          phone: '+7 (495) 123-45-67',
          email: 'info@test-ai.ru'
        }
      });
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:', testOrg.name);
    } else {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:', testOrg.name);
    }

    // 2. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —É—Å–ª—É–≥–∏
    console.log('\nüìã –®–ê–ì 2: –°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª—É–≥');
    console.log('-'.repeat(30));
    
    let services = await prisma.service.findMany({
      where: { organizationId: testOrg.id }
    });

    if (services.length === 0) {
      services = await Promise.all([
        prisma.service.create({
          data: {
            name: '–ú–∞–Ω–∏–∫—é—Ä',
            nameRu: '–ú–∞–Ω–∏–∫—é—Ä',
            description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä',
            descriptionRu: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≥–µ–ª—å-–ª–∞–∫–æ–º',
            durationMin: 60,
            price: 2000,
            currency: 'RUB',
            organizationId: testOrg.id
          }
        }),
        prisma.service.create({
          data: {
            name: '–ü–µ–¥–∏–∫—é—Ä',
            nameRu: '–ü–µ–¥–∏–∫—é—Ä',
            description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–µ–¥–∏–∫—é—Ä',
            descriptionRu: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–µ–¥–∏–∫—é—Ä —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º',
            durationMin: 90,
            price: 2500,
            currency: 'RUB',
            organizationId: testOrg.id
          }
        })
      ]);
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã —É—Å–ª—É–≥–∏:', services.map(s => s.nameRu).join(', '));
    } else {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã —É—Å–ª—É–≥–∏:', services.map(s => s.nameRu || s.name).join(', '));
    }

    // 3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    console.log('\nüìã –®–ê–ì 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AI');
    console.log('-'.repeat(30));
    
    const aiConfig = await prisma.organizationAIConfig.upsert({
      where: { organizationId: testOrg.id },
      update: {
        provider: 'openai',
        apiKey: apiKey,
        model: 'gpt-4o-mini',
        maxTokens: 2000,
        temperature: 0.7,
        systemPrompt: '–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–ª–∏–Ω–∏–∫–∏ –∫—Ä–∞—Å–æ—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É—Å–ª—É–≥–∞—Ö –∏ —Ü–µ–Ω–∞—Ö. –í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–µ–º-—Ç–æ.',
        customPrompts: JSON.stringify({
          greeting: '–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –∫–ª–∏–Ω–∏–∫—É –∫—Ä–∞—Å–æ—Ç—ã! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –∑–∞–ø–∏—Å—å—é –Ω–∞ —É—Å–ª—É–≥–∏, —Ä–∞—Å—Å–∫–∞–∂—É –æ —Ü–µ–Ω–∞—Ö –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.',
          bookingHelp: '–ü–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é —É—Å–ª—É–≥—É –∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏. –£ –Ω–∞—Å –µ—Å—Ç—å –º–∞–Ω–∏–∫—é—Ä –∏ –ø–µ–¥–∏–∫—é—Ä.',
          serviceInfo: '–†–∞—Å—Å–∫–∞–∂—É –ø–æ–¥—Ä–æ–±–Ω–æ –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö, –∏—Ö –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.',
          support: '–î–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é. –ù–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –∏ email –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã.',
          general: '–û—Ç–≤–µ—á—É –Ω–∞ –ª—é–±—ã–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö, —Ü–µ–Ω–∞—Ö –∏–ª–∏ –∑–∞–ø–∏—Å–∏.'
        }),
        enabled: true
      },
      create: {
        organizationId: testOrg.id,
        provider: 'openai',
        apiKey: apiKey,
        model: 'gpt-4o-mini',
        maxTokens: 2000,
        temperature: 0.7,
        systemPrompt: '–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–ª–∏–Ω–∏–∫–∏ –∫—Ä–∞—Å–æ—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É—Å–ª—É–≥–∞—Ö –∏ —Ü–µ–Ω–∞—Ö. –í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–µ–º-—Ç–æ.',
        customPrompts: JSON.stringify({
          greeting: '–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –∫–ª–∏–Ω–∏–∫—É –∫—Ä–∞—Å–æ—Ç—ã! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –∑–∞–ø–∏—Å—å—é –Ω–∞ —É—Å–ª—É–≥–∏, —Ä–∞—Å—Å–∫–∞–∂—É –æ —Ü–µ–Ω–∞—Ö –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.',
          bookingHelp: '–ü–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é —É—Å–ª—É–≥—É –∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏. –£ –Ω–∞—Å –µ—Å—Ç—å –º–∞–Ω–∏–∫—é—Ä –∏ –ø–µ–¥–∏–∫—é—Ä.',
          serviceInfo: '–†–∞—Å—Å–∫–∞–∂—É –ø–æ–¥—Ä–æ–±–Ω–æ –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö, –∏—Ö –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.',
          support: '–î–ª—è —Ä–µ—à–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é. –ù–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –∏ email –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã.',
          general: '–û—Ç–≤–µ—á—É –Ω–∞ –ª—é–±—ã–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö, —Ü–µ–Ω–∞—Ö –∏–ª–∏ –∑–∞–ø–∏—Å–∏.'
        }),
        enabled: true
      }
    });

    console.log('‚úÖ AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
    console.log('   - Provider: OpenAI');
    console.log('   - Model: gpt-4o-mini');
    console.log('   - API Key: –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    console.log('   - Enabled: true');

    // 4. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    console.log('\nüéâ –ù–ê–°–¢–†–û–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!');
    console.log('=' .repeat(50));
    console.log('‚úÖ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    console.log('\nüìã –ß—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ:');
    console.log('   - –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: ' + testOrg.name);
    console.log('   - –£—Å–ª—É–≥–∏: ' + services.length + ' —à—Ç.');
    console.log('   - OpenAI API –∫–ª—é—á –ø–æ–¥–∫–ª—é—á–µ–Ω');
    console.log('   - AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞');
    console.log('   - AI –≤–∫–ª—é—á–µ–Ω');
    
    console.log('\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('   1. –û—Ç–∫—Ä–æ–π—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://localhost:4200');
    console.log('   2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ AI Assistant');
    console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
    console.log('   4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ Telegram –±–æ—Ç–µ');
    
    console.log('\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±–æ—Ç–µ:');
    console.log('   - –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /ai');
    console.log('   - –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å: "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ —É –≤–∞—Å –µ—Å—Ç—å?"');
    console.log('   - AI –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏');

    console.log('\nüîë –í–∞—à API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ AI:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
quickSetupAI();
