generator client {
provider = "prisma-client-js"
}


datasource db {
provider = "sqlite"
url = env("DATABASE_URL")
}


model Organization {
  id          Int      @id @default(autoincrement())
  name        String
  description String?  // Описание организации для AI
  address     String?  // Адрес организации
  workingHours String? // Часы работы (например: "Пн-Пт: 9:00-18:00, Сб: 10:00-16:00")
  phone       String?  // Телефон для связи
  email       String?  // Email для связи
  avatar      String?  // URL to avatar image
  botToken    String?  // Telegram bot token
  botUsername String?  // Telegram bot username
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
  services    Service[]
  aiConfig    OrganizationAIConfig?
  aiUsageLogs AIUsageLog[]
}

model User {
  id             Int          @id @default(autoincrement())
  email          String       @unique
  password       String
  name           String
  role           UserRole     @default(MANAGER)
  organizationId Int
  telegramId     String?      @unique // Telegram user ID for Web App auth
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum UserRole {
  SUPER_ADMIN
  OWNER
  MANAGER
}

model Service {
  id             Int      @id @default(autoincrement())
  name           String   // fallback name
  nameRu         String?  // русское название
  nameEn         String?  // английское название  
  nameHe         String?  // название на иврите
  description    String?
  descriptionRu  String?
  descriptionEn  String?
  descriptionHe  String?
  durationMin    Int      // e.g., 30
  price          Float?   // стоимость услуги
  currency       String?  @default("RUB") // валюта (RUB, USD, EUR)
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  slots          Slot[]
  appointments   Appointment[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}


model Slot {
  id         Int      @id @default(autoincrement())
  serviceId  Int
  service    Service  @relation(fields: [serviceId], references: [id])
  startAt    DateTime
  endAt      DateTime
  capacity   Int      @default(1)
  bookings   Appointment[]

  @@unique([serviceId, startAt]) // ← защищает от повторной генерации
}



model Appointment {
  id         Int      @id @default(autoincrement())
  chatId     String
  serviceId  Int
  service    Service  @relation(fields: [serviceId], references: [id])
  slotId     Int
  slot       Slot     @relation(fields: [slotId], references: [id])
  createdAt  DateTime @default(now())
  status     String   @default("confirmed")

  @@unique([slotId]) // <— добавили
}

// AI Configuration for Organizations
model OrganizationAIConfig {
  id                    Int      @id @default(autoincrement())
  organizationId        Int      @unique
  organization          Organization @relation(fields: [organizationId], references: [id])
  provider              String   // 'openai', 'claude', 'custom'
  apiKey                String
  model                 String   // e.g., 'gpt-4o-mini'
  maxTokens             Int?
  temperature           Float?
  systemPrompt          String?  // Legacy field - use baseSystemPrompt instead
  baseSystemPrompt      String?  // Base system prompt for AI
  contextInstructions   String?  // Instructions for context handling
  behaviorInstructions  String?  // Instructions for AI behavior
  fallbackPrompt        String?  // Fallback prompt for unknown questions
  customPrompts         String?  // JSON string with custom prompts for different scenarios
  enabled               Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// AI Usage Logging
model AIUsageLog {
  id             Int      @id @default(autoincrement())
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  tokensUsed     Int
  scenario       String?  // 'greeting', 'booking_help', 'service_info', etc.
  model          String?
  createdAt      DateTime @default(now())
}
