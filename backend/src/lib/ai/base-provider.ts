import { AIProvider, AIConversation, AIResponse } from './types';

export abstract class BaseAIProvider implements AIProvider {
  abstract name: string;
  abstract models: string[];

  abstract sendMessage(conversation: AIConversation, model?: string): Promise<AIResponse>;
  abstract validateConfig(config: any): boolean;

  // –û–±—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
  protected formatMessages(conversation: AIConversation): any[] {
    const messages = [...conversation.messages];
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    if (conversation.context) {
      const systemPrompt = this.buildSystemPrompt(conversation.context);
      messages.unshift({
        role: 'system',
        content: systemPrompt
      });
    }
    
    return messages;
  }

  protected buildSystemPrompt(context: any): string {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
    const basePrompt = context.baseSystemPrompt || 
      `–¢—ã - AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ "${context.organizationName}". ` +
      `–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ–≥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º —Å –∑–∞–ø–∏—Å—å—é –Ω–∞ —É—Å–ª—É–≥–∏ –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.`;
    
    let prompt = basePrompt;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (context.systemPrompt && context.systemPrompt.trim()) {
      prompt += `\n\nüéØ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò –û–¢ –í–õ–ê–î–ï–õ–¨–¶–ê:\n${context.systemPrompt}`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (context.description) {
      prompt += `\n\n–û –Ω–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: ${context.description}`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if (context.address) {
      prompt += `\n\nüìç –ù–∞—à –∞–¥—Ä–µ—Å: ${context.address}`;
    }
    
    if (context.workingHours) {
      prompt += `\n\nüïê –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: ${context.workingHours}`;
    }
    
    if (context.phone) {
      prompt += `\n\nüìû –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏: ${context.phone}`;
    }
    
    if (context.email) {
      prompt += `\n\nüìß Email –¥–ª—è —Å–≤—è–∑–∏: ${context.email}`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–∞—Ö —Å –¥–µ—Ç–∞–ª—è–º–∏ –æ —Å–ª–æ—Ç–∞—Ö –∏ —Ü–µ–Ω–∞—Ö
    if (context.services && context.services.length > 0) {
      prompt += `\n\nüíÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n`;
      context.services.forEach((service: any) => {
        prompt += `\nüìã ${service.name}`;
        prompt += `\n   ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${service.duration} –º–∏–Ω—É—Ç`;
        
        if (service.priceFormatted) {
          prompt += `\n   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${service.priceFormatted}`;
        }
        
        if (service.description) {
          prompt += `\n   üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${service.description}`;
        }
        
        prompt += `\n   üìÖ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: ${service.availableSlots} –∏–∑ ${service.totalSlots} —Å–ª–æ—Ç–æ–≤ —Å–≤–æ–±–æ–¥–Ω–æ`;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
        const availableSlots = service.slots.filter((slot: any) => slot.isAvailable).slice(0, 5);
        if (availableSlots.length > 0) {
          prompt += `\n   üïê –ë–ª–∏–∂–∞–π—à–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã:`;
          availableSlots.forEach((slot: any) => {
            const date = new Date(slot.startAt).toLocaleDateString('ru-RU');
            const time = new Date(slot.startAt).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
            const dayName = new Date(slot.startAt).toLocaleDateString('ru-RU', { weekday: 'short' });
            prompt += `\n     ‚Ä¢ ${dayName} ${date} –≤ ${time}`;
          });
        } else {
          prompt += `\n   ‚ö†Ô∏è –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è`;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
        const bookedSlots = service.slots.filter((slot: any) => !slot.isAvailable).slice(0, 10);
        if (bookedSlots.length > 0) {
          prompt += `\n   üö´ –ó–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏):`;
          bookedSlots.forEach((slot: any) => {
            const date = new Date(slot.startAt).toLocaleDateString('ru-RU');
            const time = new Date(slot.startAt).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
            const dayName = new Date(slot.startAt).toLocaleDateString('ru-RU', { weekday: 'short' });
            prompt += `\n     ‚Ä¢ ${dayName} ${date} –≤ ${time} (–∑–∞–Ω—è—Ç)`;
          });
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–æ—Ç—ã –ø–æ –¥–Ω—è–º
        if (service.slotsByDay && Object.keys(service.slotsByDay).length > 0) {
          prompt += `\n   üìä –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º:`;
          Object.entries(service.slotsByDay).slice(0, 7).forEach(([date, slots]: [string, any]) => {
            const availableCount = slots.filter((slot: any) => slot.isAvailable).length;
            const totalCount = slots.length;
            const dateObj = new Date(date);
            const dayName = dateObj.toLocaleDateString('ru-RU', { weekday: 'long' });
            const status = availableCount > 0 ? '‚úÖ' : '‚ùå';
            prompt += `\n     ${status} ${dayName} (${date}): ${availableCount}/${totalCount} —Å–≤–æ–±–æ–¥–Ω–æ`;
          });
        }
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    if (context.contextInstructions) {
      prompt += `\n\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º:\n${context.contextInstructions}`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø–∏—Å–µ–π
    if (context.appointmentStats) {
      const stats = context.appointmentStats;
      prompt += `\n\nüìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–µ–π:`;
      prompt += `\n   - –ó–∞–ø–∏—Å–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: ${stats.todayCount}`;
      prompt += `\n   - –ó–∞–ø–∏—Å–µ–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞: ${stats.tomorrowCount}`;
      prompt += `\n   - –ó–∞–ø–∏—Å–µ–π –Ω–∞ –Ω–µ–¥–µ–ª—é: ${stats.weekCount}`;
      prompt += `\n   - –í—Å–µ–≥–æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö: ${stats.totalUpcoming}`;
      
      if (stats.statusBreakdown && Object.keys(stats.statusBreakdown).length > 0) {
        prompt += `\n   - –°—Ç–∞—Ç—É—Å—ã –∑–∞–ø–∏—Å–µ–π:`;
        Object.entries(stats.statusBreakdown).forEach(([status, count]) => {
          const statusText = this.getStatusText(status);
          prompt += `\n     * ${statusText}: ${count}`;
        });
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    if (context.currentDateTime) {
      const now = new Date(context.currentDateTime);
      const currentTime = now.toLocaleString('ru-RU');
      prompt += `\n\nüïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${currentTime}`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–≤–µ–¥–µ–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if (context.behaviorInstructions) {
      prompt += `\n\nüéØ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏:\n${context.behaviorInstructions}`;
    } else {
      // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –µ—Å–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ UI
      prompt += `\n\nüéØ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏:\n`;
      prompt += `- –ë—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º\n`;
      prompt += `- –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö\n`;
      prompt += `- –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –∑–∞–ø–∏—Å–∏, –ø–æ–∫–∞–∂–∏ –±–ª–∏–∂–∞–π—à–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã\n`;
      prompt += `- –ï—Å–ª–∏ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤, –ø—Ä–µ–¥–ª–æ–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –¥–∞—Ç—ã –∏–ª–∏ —É—Å–ª—É–≥–∏\n`;
      prompt += `- –û–±—ä—è—Å–Ω—è–π —Å—Ç–∞—Ç—É—Å—ã –∑–∞–ø–∏—Å–µ–π (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –æ—Ç–º–µ–Ω–µ–Ω–∞)\n`;
      prompt += `- –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–ø—Ä–∞–≤—å –µ–≥–æ –∫ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π /start\n`;
      prompt += `- –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ\n`;
      prompt += `- –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∫–µ–º-—Ç–æ –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤—è–∑–∞—Ç—å—Å—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ email\n`;
      prompt += `- –í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –ø—Ä–æ—Å–∏—Ç "–ø–æ–∑–≤–æ–Ω–∏—Ç—å", "—Å–≤—è–∑–∞—Ç—å—Å—è", "–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∫–µ–º-—Ç–æ"\n`;
      prompt += `- –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞, –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–≤—è–∑–∞—Ç—å—Å—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ email\n`;
      prompt += `- –í—Å–µ–≥–¥–∞ —É—á–∏—Ç—ã–≤–∞–π —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏\n`;
      prompt += `- –ü—Ä–∏ –≤–æ–ø—Ä–æ—Å–∞—Ö –æ —Ü–µ–Ω–∞—Ö –≤—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥`;
    }
    
    return prompt;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
  private getStatusText(status: string): string {
    const statusMap: Record<string, string> = {
      'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
      'pending': '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
      'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–∞',
      'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
      'no_show': '–ö–ª–∏–µ–Ω—Ç –Ω–µ –ø—Ä–∏—à–µ–ª'
    };
    return statusMap[status] || status;
  }

  protected calculateTokens(text: string): number {
    // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ 4 —Å–∏–º–≤–æ–ª–∞ = 1 —Ç–æ–∫–µ–Ω)
    return Math.ceil(text.length / 4);
  }

  protected createResponse(
    content: string, 
    model: string, 
    provider: string, 
    inputTokens?: number, 
    outputTokens?: number
  ): AIResponse {
    const response: AIResponse = {
      content,
      model,
      provider
    };

    if (inputTokens !== undefined && outputTokens !== undefined) {
      response.usage = {
        promptTokens: inputTokens,
        completionTokens: outputTokens,
        totalTokens: inputTokens + outputTokens
      };
    }

    return response;
  }
}
