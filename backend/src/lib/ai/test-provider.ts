import { BaseAIProvider } from './base-provider';
import { AIConversation, AIResponse, AIConfig } from './types';

export class TestProvider extends BaseAIProvider {
  name = 'custom';
  models = ['test-model'];

  private apiKey: string;
  private systemPrompt: string;

  constructor(config: AIConfig) {
    super();
    this.apiKey = config.apiKey;
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º baseSystemPrompt –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
    this.systemPrompt = config.baseSystemPrompt || config.systemPrompt || '–¢—ã AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã. –ü–æ–º–æ–≥–∞–π –∫–ª–∏–µ–Ω—Ç–∞–º —Å –∑–∞–ø–∏—Å—å—é –∏ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.';
  }

  async sendMessage(conversation: AIConversation, model: string = 'test-model'): Promise<AIResponse> {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const lastMessage = conversation.messages[conversation.messages.length - 1];
    const userMessage = lastMessage?.content?.toLowerCase() || '';

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    let response = this.getTestResponse(userMessage);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ
    if (conversation.context && this.shouldAddContext(userMessage)) {
      response += this.addOrganizationContext(conversation.context);
    }

    return {
      content: response,
      usage: {
        promptTokens: 50,
        completionTokens: response.length / 4, // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
        totalTokens: 50 + Math.floor(response.length / 4)
      },
      model: 'test-model',
      provider: 'custom'
    };
  }

  private shouldAddContext(userMessage: string): boolean {
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–± —É—Å–ª—É–≥–∞—Ö, —Ü–µ–Ω–∞—Ö –∏–ª–∏ –∑–∞–ø–∏—Å–∏
    return userMessage.includes('—É—Å–ª—É–≥') || 
           userMessage.includes('—Ü–µ–Ω–∞') || 
           userMessage.includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å') || 
           userMessage.includes('—Å–∫–æ–ª—å–∫–æ') ||
           userMessage.includes('–∑–∞–ø–∏—Å') || 
           userMessage.includes('—Å–ª–æ—Ç') ||
           userMessage.includes('—á—Ç–æ –µ—Å—Ç—å');
  }

  private getTestResponse(userMessage: string): string {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    if (userMessage.includes('applepenpineapple')) {
      return 'pen or apple?';
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    const nameMatch = this.systemPrompt.match(/–∑–æ–≤—É—Ç\s+([–ê-–Ø–ÅA-Z]+)/i);
    const aiName = nameMatch ? nameMatch[1] : 'AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç';
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    const ageMatch = this.systemPrompt.match(/(\d+)\s+–ª–µ—Ç/i);
    const aiAge = ageMatch ? ageMatch[1] : '';
    
    // –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    if (userMessage.includes('–ø—Ä–∏–≤–µ—Ç') || userMessage.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π')) {
      return `–ü—Ä–∏–≤–µ—Ç! –Ø ${aiName}${aiAge ? `, –º–Ω–µ ${aiAge} –ª–µ—Ç` : ''}. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`;
    }
    
    if (userMessage.includes('–∏–º—è') || userMessage.includes('–∑–æ–≤—É—Ç')) {
      return `–ú–µ–Ω—è –∑–æ–≤—É—Ç ${aiName}${aiAge ? `, –º–Ω–µ ${aiAge} –ª–µ—Ç` : ''}! –Ø –ø–æ–º–æ–≥–∞—é –∫–ª–∏–µ–Ω—Ç–∞–º —Å –∑–∞–ø–∏—Å—å—é –∏ –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö.`;
    }
    
    if (userMessage.includes('—É—Å–ª—É–≥') || userMessage.includes('—á—Ç–æ –µ—Å—Ç—å')) {
      return '–£ –Ω–∞—Å –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª—É–≥–∏:\n‚Ä¢ –ú–∞–Ω–∏–∫—é—Ä - 2000 ‚ÇΩ\n‚Ä¢ –ü–µ–¥–∏–∫—é—Ä - 2500 ‚ÇΩ\n‚Ä¢ –ú–∞—Å—Å–∞–∂ —Ä—É–∫ - 1500 ‚ÇΩ\n‚Ä¢ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —É—Ö–æ–¥ - 4000 ‚ÇΩ';
    }
    
    if (userMessage.includes('—Ü–µ–Ω–∞') || userMessage.includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å') || userMessage.includes('—Å–∫–æ–ª—å–∫–æ')) {
      return '–¶–µ–Ω—ã –Ω–∞ –Ω–∞—à–∏ —É—Å–ª—É–≥–∏:\n‚Ä¢ –ú–∞–Ω–∏–∫—é—Ä: 2000 ‚ÇΩ\n‚Ä¢ –ü–µ–¥–∏–∫—é—Ä: 2500 ‚ÇΩ\n‚Ä¢ –ú–∞—Å—Å–∞–∂ —Ä—É–∫: 1500 ‚ÇΩ\n‚Ä¢ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —É—Ö–æ–¥: 4000 ‚ÇΩ';
    }
    
    if (userMessage.includes('–∑–∞–ø–∏—Å') || userMessage.includes('—Å–ª–æ—Ç') || userMessage.includes('–≤—Ä–µ–º—è')) {
      return '–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥–∏ –º–æ–∂–µ—Ç–µ:\n‚Ä¢ –ü–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–º: +7 (495) 123-45-67\n‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞ email: info@beauty-clinic.ru\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏';
    }
    
    if (userMessage.includes('—Ä–∞–±–æ—Ç–∞') || userMessage.includes('—á–∞—Å—ã') || userMessage.includes('–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã')) {
      return '–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º:\n‚Ä¢ –ü–Ω-–ü—Ç: 9:00-21:00\n‚Ä¢ –°–±-–í—Å: 10:00-18:00';
    }
    
    if (userMessage.includes('–∫–æ–Ω—Ç–∞–∫—Ç') || userMessage.includes('—Å–≤—è–∑–∞—Ç—å') || userMessage.includes('–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å')) {
      return '–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 123-45-67\nüìß Email: info@beauty-clinic.ru\nüìç –ê–¥—Ä–µ—Å: —É–ª. –ö—Ä–∞—Å–æ—Ç—ã, 123, –ú–æ—Å–∫–≤–∞';
    }
    
    if (userMessage.includes('–Ω–∞–∑–≤–∞–Ω–∏–µ') || userMessage.includes('–Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è') || userMessage.includes('–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è')) {
      return '–ù–∞—à–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "Test Beauty Clinic" - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∏–Ω–∏–∫–∞ –∫—Ä–∞—Å–æ—Ç—ã —Å –ø–æ–ª–Ω—ã–º —Å–ø–µ–∫—Ç—Ä–æ–º —É—Å–ª—É–≥.';
    }
    
    // –û–±—â–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    return '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –∑–∞–ø–∏—Å—å—é –Ω–∞ —É—Å–ª—É–≥–∏ –∏–ª–∏ –æ—Ç–≤–µ—á—É –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∞—à–µ–º —Å–∞–ª–æ–Ω–µ. –ú–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +7 (495) 123-45-67.';
  }

  private addOrganizationContext(context: any): string {
    let contextInfo = '\n\n';
    
    if (context.organization) {
      contextInfo += `–û –Ω–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: ${context.organization.name}`;
      if (context.organization.description) {
        contextInfo += ` - ${context.organization.description}`;
      }
    }
    
    if (context.services && context.services.length > 0) {
      contextInfo += '\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:';
      context.services.forEach((service: any) => {
        const price = service.price ? `${service.price} ${service.currency || 'RUB'}` : '–¶–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É';
        contextInfo += `\n‚Ä¢ ${service.nameRu || service.name}: ${price}`;
      });
    }
    
    return contextInfo;
  }

  validateConfig(config: any): boolean {
    return !!(config.apiKey && typeof config.apiKey === 'string');
  }

  async getAvailableModels(): Promise<string[]> {
    return this.models;
  }

  async checkApiKey(): Promise<{ valid: boolean; error?: string }> {
    return { valid: true };
  }
}
