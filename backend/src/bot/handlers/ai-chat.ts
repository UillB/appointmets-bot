import { Context } from 'telegraf';
import { AIService } from '../../lib/ai/ai-service';
import { AIConversation, AIScenario } from '../../lib/ai/types';

export class AIChatHandler {
  private aiService: AIService;

  constructor() {
    this.aiService = new AIService();
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ai
  async handleAICommand(ctx: Context, organizationId: number): Promise<void> {
    try {
      await ctx.reply(
        'ü§ñ AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n' +
        '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å:\n' +
        '‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å–ª—É–≥–∞—Ö\n' +
        '‚Ä¢ –ü–æ–º–æ—â—å—é —Å –∑–∞–ø–∏—Å—å—é\n' +
        '‚Ä¢ –û—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n' +
        '‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–æ–π\n\n' +
        '–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å!'
      );
    } catch (error) {
      console.error('Error in AI command handler:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ AI —Å–æ–æ–±—â–µ–Ω–∏–π
  async handleAIMessage(ctx: Context, organizationId: number, messageText: string): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
      const bookingAction = this.parseBookingAction(messageText);
      if (bookingAction) {
        await this.handleBookingAction(ctx, organizationId, bookingAction);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º –æ –∑–∞–ø–∏—Å—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (this.isUserAppointmentsQuery(messageText.toLowerCase())) {
        await this.handleUserAppointmentsQuery(ctx, organizationId);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤—ã–±–æ—Ä–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏
      const slotSelection = this.parseSlotSelection(messageText);
      if (slotSelection) {
        await this.handleSlotSelection(ctx, organizationId, slotSelection);
        return;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
      const scenario = this.determineScenario(messageText, ctx);
      
      // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
      const conversation: AIConversation = {
        messages: [
          {
            role: 'user',
            content: messageText
          }
        ]
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ AI (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏ sendMessage)
      const response = await this.aiService.sendMessage(
        organizationId,
        conversation,
        scenario
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await ctx.reply(response.content);

    } catch (error) {
      console.error('Error in AI message handler:', error);
      
      // Fallback –æ—Ç–≤–µ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
      if (error instanceof Error) {
        if (error.message.includes('not configured') || error.message.includes('not enabled')) {
          await ctx.reply(
            'ü§ñ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n' +
            '–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start'
          );
        } else {
          await ctx.reply(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n' +
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –∑–∞–ø–∏—Å–∏.'
          );
        }
      } else {
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    }
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  private determineScenario(messageText: string, ctx: Context): AIScenario | undefined {
    const text = messageText.toLowerCase();

    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if (this.isGreeting(text)) {
      return 'greeting';
    }

    // –ü–æ–º–æ—â—å —Å –∑–∞–ø–∏—Å—å—é
    if (this.isBookingRelated(text)) {
      return 'booking_help';
    }

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª—É–≥–∞—Ö
    if (this.isServiceInfoRequest(text)) {
      return 'service_info';
    }

    // –ü–æ–¥–¥–µ—Ä–∂–∫–∞
    if (this.isSupportRequest(text)) {
      return 'support';
    }

    // –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    return 'general';
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
  private isGreeting(text: string): boolean {
    const greetings = [
      '–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', 'hi', 'hello',
      '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å', '–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä', '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ', '–∫–∞–∫ –¥–µ–ª–∞'
    ];
    return greetings.some(greeting => text.includes(greeting));
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–ø–∏—Å—å—é
  private isBookingRelated(text: string): boolean {
    const bookingKeywords = [
      '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è', '–∑–∞–ø–∏—Å—å', '–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å', '–±—Ä–æ–Ω—å', '–≤—Ä–µ–º—è',
      '—Å–≤–æ–±–æ–¥–Ω–æ', '–¥–æ—Å—Ç—É–ø–Ω–æ', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–∫–∞–ª–µ–Ω–¥–∞—Ä—å', 'appointment',
      '–∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ', '–µ—Å—Ç—å –ª–∏ –≤—Ä–µ–º—è', '—Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã', '–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã',
      '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞', '—Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è', '–º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è', '–µ—Å—Ç—å –º–µ—Å—Ç–∞',
      '—Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞', '–¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—Ç–∞', '–∫–æ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ', '–≤–æ —Å–∫–æ–ª—å–∫–æ'
    ];
    return bookingKeywords.some(keyword => text.includes(keyword));
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å–ª—É–≥–∞—Ö
  private isServiceInfoRequest(text: string): boolean {
    const serviceKeywords = [
      '—É—Å–ª—É–≥–∞', '—É—Å–ª—É–≥–∏', '—á—Ç–æ –¥–µ–ª–∞–µ—Ç–µ', '—á—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ',
      '–º–∞–Ω–∏–∫—é—Ä', '–ø–µ–¥–∏–∫—é—Ä', '—Å—Ç—Ä–∏–∂–∫–∞', '–º–∞—Å—Å–∞–∂', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å',
      '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç', '–æ–ø–∏—Å–∞–Ω–∏–µ', '—á—Ç–æ –≤—Ö–æ–¥–∏—Ç', '—á—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç',
      '–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è', '–∫–∞–∫–∏–µ —É—Å–ª—É–≥–∏', '—á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å',
      '–ø—Ä–∞–π—Å', '–ø—Ä–∞–π—Å-–ª–∏—Å—Ç', '—Ü–µ–Ω—ã', '—Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥'
    ];
    return serviceKeywords.some(keyword => text.includes(keyword));
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
  private isSupportRequest(text: string): boolean {
    const supportKeywords = [
      '–ø—Ä–æ–±–ª–µ–º–∞', '–æ—à–∏–±–∫–∞', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–ø–æ–º–æ—â—å', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞',
      '–∫–æ–Ω—Ç–∞–∫—Ç—ã', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–∞–¥—Ä–µ—Å', '–∫–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è', '–∂–∞–ª–æ–±–∞',
      '–æ—Ç–º–µ–Ω–∏—Ç—å', '–æ—Ç–º–µ–Ω–∞', '–ø–µ—Ä–µ–Ω–µ—Å—Ç–∏', '–ø–µ—Ä–µ–Ω–æ—Å', '–∏–∑–º–µ–Ω–∏—Ç—å',
      '–Ω–µ –º–æ–≥—É', '–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è', '—á—Ç–æ –¥–µ–ª–∞—Ç—å', '–∫–∞–∫ –±—ã—Ç—å',
      '—Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏', '–º–æ—è –∑–∞–ø–∏—Å—å', '–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–∏—Å—å',
      '–ø–æ–∑–≤–æ–Ω–∏—Ç—å', '—Å–≤—è–∑–∞—Ç—å—Å—è', '–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∫–µ–º-—Ç–æ', '—Å –∫–µ–º –º–æ–∂–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å',
      '–º–µ–Ω–µ–¥–∂–µ—Ä', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', '–¥–∏—Ä–µ–∫—Ç–æ—Ä', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å',
      '–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'email', '–ø–æ—á—Ç–∞', '—Å–≤—è–∑–∞—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é'
    ];
    return supportKeywords.some(keyword => text.includes(keyword));
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ AI –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
  async isAIActivated(organizationId: number): Promise<boolean> {
    try {
      const config = await this.aiService.getOrganizationAIConfig(organizationId);
      return config?.enabled || false;
    } catch (error) {
      console.error('Error checking AI activation:', error);
      return false;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI
  async getUsageStats(organizationId: number, days: number = 7): Promise<any> {
    try {
      return await this.aiService.getUsageStats(organizationId, days);
    } catch (error) {
      console.error('Error getting AI usage stats:', error);
      return null;
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
  private parseBookingAction(messageText: string): { action: 'confirm' | 'cancel', appointmentId?: number, specificTime?: string } | null {
    const text = messageText.toLowerCase().trim();
    
    // –ö–æ–º–∞–Ω–¥—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if (text.includes('–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é') || text.includes('–¥–∞, –∑–∞–ø–∏—Å—ã–≤–∞—é—Å—å') || 
        text.includes('–¥–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é') || text.includes('–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å') ||
        text.includes('–¥–∞, —Ö–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è') || text.includes('—Å–æ–≥–ª–∞—Å–µ–Ω')) {
      return { action: 'confirm' };
    }
    
    // –ö–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
    if (text.includes('–æ—Ç–º–µ–Ω—è—é') || text.includes('–æ—Ç–º–µ–Ω–∏—Ç—å') || 
        text.includes('–Ω–µ —Ö–æ—á—É') || text.includes('–ø–µ—Ä–µ–¥—É–º–∞–ª') ||
        text.includes('–æ—Ç–∫–∞–∑') || text.includes('–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç')) {
      
      // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –≤—Ä–µ–º—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
      const timeMatch = text.match(/(\d{1,2})\s*:\s*(\d{2})|(\d{1,2})\s+(\d{2})/);
      if (timeMatch) {
        const hour = timeMatch[1] || timeMatch[3];
        const minute = timeMatch[2] || timeMatch[4];
        const specificTime = `${hour.padStart(2, '0')}:${minute}`;
        console.log(`üéØ Found specific time for cancellation: ${specificTime}`);
        return { action: 'cancel', specificTime };
      }
      
      return { action: 'cancel' };
    }
    
    return null;
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
  private parseSlotSelection(messageText: string): { serviceName: string, date: string, time: string } | null {
    const text = messageText.toLowerCase().trim();
    
    console.log(`üîç Parsing slot selection from: "${messageText}"`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º –æ –∑–∞–ø–∏—Å—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (this.isUserAppointmentsQuery(text)) {
      console.log(`‚ùå This is a user appointments query, not slot selection`);
      return null;
    }
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–∞
    // –ü—Ä–∏–º–µ—Ä—ã: "20 10 2025 15 00", "–ø–Ω 20 10 2025 15 00", "15 00", "15:00"
    const dateTimePatterns = [
      /(\d{1,2})\s+(\d{1,2})\s+(\d{4})\s+(\d{1,2})\s+(\d{2})/, // 20 10 2025 15 00
      /(\d{1,2})\s*:\s*(\d{2})/, // 15:00 –∏–ª–∏ 15 00
      /(\d{1,2})\s+(\d{2})/, // 15 00
    ];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä–µ–º—è
    for (const pattern of dateTimePatterns) {
      const match = text.match(pattern);
      if (match) {
        console.log(`‚úÖ Found time pattern match:`, match);
        
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
        if (match.length >= 5) {
          const day = match[1];
          const month = match[2];
          const year = match[3];
          const hour = match[4];
          const minute = match[5];
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
          const serviceName = this.extractServiceName(messageText);
          
          const result = {
            serviceName: serviceName,
            date: `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`,
            time: `${hour.padStart(2, '0')}:${minute}`
          };
          
          console.log(`üìÖ Parsed full date/time:`, result);
          return result;
        }
        // –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è
        else if (match.length >= 3) {
          const hour = match[1];
          const minute = match[2];
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
          const serviceName = this.extractServiceName(messageText);
          
          const result = {
            serviceName: serviceName,
            date: '2025-10-20', // –ü–æ–∫–∞ —Ö–∞—Ä–¥–∫–æ–¥–∏–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
            time: `${hour.padStart(2, '0')}:${minute}`
          };
          
          console.log(`‚è∞ Parsed time only:`, result);
          return result;
        }
      }
    }
    
    console.log(`‚ùå No time pattern found in: "${messageText}"`);
    return null;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–º –æ –∑–∞–ø–∏—Å—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private isUserAppointmentsQuery(text: string): boolean {
    const appointmentQueryKeywords = [
      '–º–æ–∏ –∑–∞–ø–∏—Å–∏',
      '–∫–∞–∫–∏–µ —É –º–µ–Ω—è –∑–∞–ø–∏—Å–∏',
      '–ø–æ–∫–∞–∂–∏ –º–æ–∏ –∑–∞–ø–∏—Å–∏',
      '–∑–∞–ø–∏—Å–∏ –Ω–∞',
      '–∏–Ω—Ñ—É –ø–æ –º–æ–∏–º –∑–∞–ø–∏—Å—è–º',
      '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å—è—Ö',
      '—á—Ç–æ —É –º–µ–Ω—è –∑–∞–ø–∏—Å–∞–Ω–æ',
      '–¥–∞–π –∏–Ω—Ñ—É –ø–æ –≤—Å–µ–º',
      '–ø–æ–∫–∞–∂–∏ –≤—Å–µ –∑–∞–ø–∏—Å–∏',
      '–º–æ–∏ –∑–∞–ø–∏—Å–∏ –µ—Å—Ç—å',
      '–∫–∞–∫–∏–µ —É –º–µ–Ω—è –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏',
      '–ø–æ–∫–∞–∂–∏ –º–æ–∏ –∑–∞–ø–∏—Å–∏ –µ—Å—Ç—å'
    ];
    
    console.log(`üîç Checking if "${text}" is user appointments query`);
    const isQuery = appointmentQueryKeywords.some(keyword => text.includes(keyword));
    console.log(`üéØ Is user appointments query: ${isQuery}`);
    
    return isQuery;
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
  private extractServiceName(messageText: string): string {
    const text = messageText.toLowerCase().trim();
    
    // –ú–∞–ø–ø–∏–Ω–≥ —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ
    const serviceMapping: { [key: string]: string } = {
      '—Ç–µ—Å—Ç –≤–∞–Ω': 'Test One',
      '—Ç–µ—Å—Ç –≤–∞–Ω–Ω': 'Test One',
      '—Ç–µ—Å—Ç –æ–¥–∏–Ω': 'Test One',
      '—Ç–µ—Å—Ç —Ç—É': 'Test Two',
      '—Ç–µ—Å—Ç –¥–≤–∞': 'Test Two',
      'test one': 'Test One',
      'test two': 'Test Two'
    };
    
    // –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    for (const [russian, english] of Object.entries(serviceMapping)) {
      if (text.includes(russian)) {
        console.log(`üéØ Found service mapping: "${russian}" -> "${english}"`);
        return english;
      }
    }
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º Test One
    console.log(`üéØ No service mapping found, using default: "Test One"`);
    return 'Test One';
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –∑–∞–ø–∏—Å—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private async handleUserAppointmentsQuery(ctx: Context, organizationId: number): Promise<void> {
    try {
      const chatId = String(ctx.chat?.id);
      const { prisma } = await import('../../lib/prisma.js');

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const appointments = await prisma.appointment.findMany({
        where: {
          chatId: chatId,
          status: { in: ['pending', 'confirmed'] },
          service: {
            organizationId: organizationId
          }
        },
        include: {
          slot: true,
          service: true
        },
        orderBy: {
          slot: {
            startAt: 'asc'
          }
        }
      });

      if (appointments.length === 0) {
        await ctx.reply('üìÖ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.\n\n–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É? üòä');
        return;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å—è—Ö
      let response = 'üìÖ **–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:**\n\n';
      
      appointments.forEach((appointment, index) => {
        const slotStart = new Date(appointment.slot.startAt);
        const formattedDate = slotStart.toLocaleDateString('ru-RU', {
          weekday: 'short',
          day: '2-digit',
          month: '2-digit',
          hour: '2-digit',
          minute: '2-digit'
        });

        const statusEmoji = appointment.status === 'confirmed' ? '‚úÖ' : '‚è≥';
        const statusText = appointment.status === 'confirmed' ? '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞' : '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è';

        response += `${statusEmoji} **${appointment.service.nameRu || appointment.service.name}**\n`;
        response += `üìÖ ${formattedDate}\n`;
        response += `‚è±Ô∏è ${appointment.service.durationMin} –º–∏–Ω—É—Ç\n`;
        response += `üìä –°—Ç–∞—Ç—É—Å: ${statusText}\n\n`;
      });

      response += 'üí° –î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω—è—é" –∏–ª–∏ "–ø–µ—Ä–µ–¥—É–º–∞–ª"';
      
      await ctx.reply(response);

    } catch (error) {
      console.error('Error handling user appointments query:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å—è—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–∞
  private async handleSlotSelection(ctx: Context, organizationId: number, selection: { serviceName: string, date: string, time: string }): Promise<void> {
    try {
      const chatId = String(ctx.chat?.id);
      const { prisma } = await import('../../lib/prisma.js');

      // –ù–∞—Ö–æ–¥–∏–º —É—Å–ª—É–≥—É –ø–æ –∏–º–µ–Ω–∏
      const service = await prisma.service.findFirst({
        where: {
          organizationId: organizationId,
          OR: [
            { name: { contains: selection.serviceName } },
            { nameRu: { contains: selection.serviceName } }
          ]
        }
      });

      if (!service) {
        await ctx.reply('‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–æ—Ç–∞
      const [year, month, day] = selection.date.split('-').map(Number);
      const [hour, minute] = selection.time.split(':').map(Number);
      
      const slotDateTime = new Date(year, month - 1, day, hour, minute);
      const slotEndTime = new Date(slotDateTime.getTime() + service.durationMin * 60000);

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ª–æ—Ç
      const slot = await prisma.slot.findFirst({
        where: {
          serviceId: service.id,
          startAt: {
            gte: slotDateTime,
            lt: new Date(slotDateTime.getTime() + 60000) // +1 –º–∏–Ω—É—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
          }
        },
        include: {
          bookings: {
            where: {
              status: { not: 'cancelled' }
            }
          }
        }
      });

      if (!slot) {
        await ctx.reply(`‚ùå –°–ª–æ—Ç –Ω–∞ ${selection.date} –≤ ${selection.time} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.`);
        return;
      }

      if (slot.bookings.length > 0) {
        await ctx.reply(`‚ùå –°–ª–æ—Ç –Ω–∞ ${selection.date} –≤ ${selection.time} —É–∂–µ –∑–∞–Ω—è—Ç.`);
        return;
      }

      // –°–æ–∑–¥–∞–µ–º pending –∑–∞–ø–∏—Å—å
      const appointment = await prisma.appointment.create({
        data: {
          chatId: chatId,
          slotId: slot.id,
          serviceId: service.id,
          status: 'pending'
        },
        include: {
          slot: true,
          service: true
        }
      });

      const formattedDate = slotDateTime.toLocaleDateString('ru-RU', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });

      await ctx.reply(
        `üìÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞!\n\n` +
        `üíÖ –£—Å–ª—É–≥–∞: ${service.nameRu || service.name}\n` +
        `üìÖ –î–∞—Ç–∞: ${formattedDate}\n` +
        `‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${service.durationMin} –º–∏–Ω—É—Ç\n\n` +
        `–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é" –∏–ª–∏ "–¥–∞, –∑–∞–ø–∏—Å—ã–≤–∞—é—Å—å"\n` +
        `–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ "–æ—Ç–º–µ–Ω—è—é" –∏–ª–∏ "–ø–µ—Ä–µ–¥—É–º–∞–ª"`
      );

    } catch (error) {
      console.error('Error handling slot selection:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∑–∞–ø–∏—Å–∏
  private async handleBookingAction(ctx: Context, organizationId: number, action: { action: 'confirm' | 'cancel', appointmentId?: number, specificTime?: string }): Promise<void> {
    try {
      const chatId = String(ctx.chat?.id);
      
      if (action.action === 'confirm') {
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { prisma } = await import('../../lib/prisma.js');
        
        const pendingAppointment = await prisma.appointment.findFirst({
          where: {
            chatId: chatId,
            status: 'pending',
            service: {
              organizationId: organizationId
            }
          },
          include: {
            slot: true,
            service: true
          },
          orderBy: {
            createdAt: 'desc'
          }
        });

        if (pendingAppointment) {
          // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–ø–∏—Å—å
          await prisma.appointment.update({
            where: { id: pendingAppointment.id },
            data: { status: 'confirmed' }
          });

          const slotStart = new Date(pendingAppointment.slot.startAt);
          const formattedDate = slotStart.toLocaleDateString('ru-RU', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
          });

          await ctx.reply(
            `‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n` +
            `üìÖ –î–∞—Ç–∞: ${formattedDate}\n` +
            `üíÖ –£—Å–ª—É–≥–∞: ${pendingAppointment.service.nameRu || pendingAppointment.service.name}\n` +
            `‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${pendingAppointment.service.durationMin} –º–∏–Ω—É—Ç\n\n` +
            `–î–æ –≤—Å—Ç—Ä–µ—á–∏! üòä`
          );
        } else {
          await ctx.reply('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.');
        }
      } else if (action.action === 'cancel') {
        // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { prisma } = await import('../../lib/prisma.js');
        
        let whereClause: any = {
          chatId: chatId,
          status: { in: ['pending', 'confirmed'] },
          service: {
            organizationId: organizationId
          }
        };

        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è, –∏—â–µ–º –∑–∞–ø–∏—Å—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        if (action.specificTime) {
          console.log(`üîç Looking for appointment at time: ${action.specificTime}`);
          
          // –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ (—Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –º–∏–Ω—É—Ç—ã)
          // –ò—â–µ–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å (20.10.2025)
          const [hour, minute] = action.specificTime.split(':').map(Number);
          const targetDate = new Date(2025, 9, 20); // 20 –æ–∫—Ç—è–±—Ä—è 2025
          targetDate.setHours(hour, minute, 0, 0);
          const nextMinute = new Date(targetDate.getTime() + 60000);
          
          console.log(`üîç Searching for slot between ${targetDate.toISOString()} and ${nextMinute.toISOString()}`);
          
          whereClause.slot = {
            startAt: {
              gte: targetDate,
              lt: nextMinute
            }
          };
        }

        const activeAppointment = await prisma.appointment.findFirst({
          where: whereClause,
          include: {
            slot: true,
            service: true
          },
          orderBy: action.specificTime ? undefined : {
            createdAt: 'desc'
          }
        });

        if (activeAppointment) {
          // –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å
          await prisma.appointment.update({
            where: { id: activeAppointment.id },
            data: { status: 'cancelled' }
          });

          const slotStart = new Date(activeAppointment.slot.startAt);
          const formattedDate = slotStart.toLocaleDateString('ru-RU', {
            weekday: 'short',
            day: '2-digit',
            month: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
          });

          await ctx.reply(
            `‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞!\n\n` +
            `üìÖ –î–∞—Ç–∞: ${formattedDate}\n` +
            `üíÖ –£—Å–ª—É–≥–∞: ${activeAppointment.service.nameRu || activeAppointment.service.name}\n\n` +
            `–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞! üòä`
          );
        } else {
          if (action.specificTime) {
            await ctx.reply(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–∏ –Ω–∞ –≤—Ä–µ–º—è ${action.specificTime} –¥–ª—è –æ—Ç–º–µ–Ω—ã.`);
          } else {
            await ctx.reply('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.');
          }
        }
      }
    } catch (error) {
      console.error('Error handling booking action:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }
}
