import { Context, Markup, Telegraf } from "telegraf";
import { prisma } from "../../lib/prisma";
import { getLocalizedServiceName } from "../../lib/localization";

function fmt(dt: Date) {
  return new Date(dt).toLocaleString("ru-RU", {
    weekday: "short",
    day: "2-digit",
    month: "2-digit",
    hour: "2-digit",
    minute: "2-digit",
  });
}

/** /my ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
export function handleMy() {
  return async (ctx: Context) => {
    const chatId = String(ctx.chat?.id);
    const now = new Date();

    const appts = await prisma.appointment.findMany({
      where: { chatId, status: "confirmed" },
      include: { service: true, slot: true },
      orderBy: { slot: { startAt: "asc" } },
      take: 10,
    });

    if (!appts.length) {
      return ctx.reply(ctx.tt("my.noAppointments"));
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∏—Ç—å"
    for (const a of appts) {
      await ctx.reply(
        `üóì ${getLocalizedServiceName(a.service, ctx.lang)}\n${ctx.tt("my.time")}: ${fmt(a.slot.startAt)}`,
        Markup.inlineKeyboard([
          [Markup.button.callback(ctx.tt("my.cancel"), `cancel_${a.id}`)],
        ])
      );
    }
  };
}

/** –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–ª–±—ç–∫–æ–≤ –æ—Ç–º–µ–Ω—ã */
export function registerMyCallbacks(bot: Telegraf) {
  bot.action(/^cancel_(\d+)$/, async (ctx) => {
    await ctx.answerCbQuery();

    const id = Number(ctx.match[1]);
    const chatId = String(ctx.chat?.id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const appt = await prisma.appointment.findUnique({
      where: { id },
      include: { slot: true, service: true },
    });

    if (!appt || appt.chatId !== chatId) {
      return ctx.reply(ctx.tt("my.appointmentNotFound"));
    }

    // –ú—è–≥–∫–∞—è –æ—Ç–º–µ–Ω–∞ (—Å—Ç–∞—Ç—É—Å), –º–æ–∂–Ω–æ –∏ —É–¥–∞–ª–∏—Ç—å
    await prisma.appointment.update({
      where: { id },
      data: { status: "cancelled" },
    });

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É/–≤ –≥—Ä—É–ø–ø—É –æ–± –æ—Ç–º–µ–Ω–µ
    const who = `${ctx.from?.first_name || ""} ${ctx.from?.last_name || ""}`.trim();
    const uname = ctx.from?.username ? `@${ctx.from.username}` : "‚Äî";
    const when = fmt(appt.slot.startAt);
    const serviceName = getLocalizedServiceName(appt.service, ctx.lang);
    
    const cancelMsg =
      `${ctx.tt("admin.cancelHeader")}\n` +
      `${ctx.tt("admin.user")}: ${who} (${uname})\n` +
      `${ctx.tt("admin.service")}: ${serviceName}\n` +
      `${ctx.tt("admin.time")}: ${when}`;

    try {
      if (process.env.ADMIN_CHAT_ID) {
        await ctx.telegram.sendMessage(process.env.ADMIN_CHAT_ID, cancelMsg);
      }
      if (process.env.ADMIN_GROUP_ID) {
        await ctx.telegram.sendMessage(process.env.ADMIN_GROUP_ID, cancelMsg.replace("‚ùå", "üë•"));
      }
    } catch (e) { 
      console.error("Admin cancel notify failed:", e); 
    }

    await ctx.editMessageText(
      `${ctx.tt("my.cancelled")}\n${serviceName}\n${when}`
    );
  });
}
