import { Context, Markup, Telegraf } from "telegraf";
import { prisma } from "../../lib/prisma";
import { getLocalizedServiceName } from "../../lib/localization";
import { ENV } from "../../lib/env";

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
const fmtTime = (d: Date) => new Date(d).toLocaleTimeString("ru-RU", { hour: "2-digit", minute: "2-digit" });
const fmtDate = (d: Date) => new Date(d).toLocaleDateString("ru-RU");

// /slots ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–æ–≤
export function handleSlots(organizationId?: number) {
  return async (ctx: Context) => {
    const services = await prisma.service.findMany({ 
      where: organizationId ? { organizationId } : undefined,
      take: 10 
    });
    if (!services.length) return ctx.reply(ctx.tt("slots.noServices"));
    
    const buttons = services.map(s => [Markup.button.callback(getLocalizedServiceName(s, ctx.lang), `slots_service_${s.id}`)]);
    await ctx.reply(ctx.tt("slots.chooseService"), Markup.inlineKeyboard(buttons));
  };
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–æ—Ç–æ–≤
export function registerSlotsCallbacks(bot: Telegraf, organizationId?: number) {
  // –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–æ—Ç–æ–≤
  bot.action(/^slots_service_(\d+)$/, async (ctx) => {
    await ctx.answerCbQuery();
    const serviceId = Number(ctx.match[1]);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback(ctx.tt("slots.today"), `slots_day_${serviceId}_today`)],
      [Markup.button.callback(ctx.tt("slots.tomorrow"), `slots_day_${serviceId}_tomorrow`)],
      [Markup.button.callback(ctx.tt("slots.week"), `slots_week_${serviceId}`)],
      [Markup.button.callback("‚óÄÔ∏è", `slots_back_${serviceId}`)]
    ]);
    
    await ctx.editMessageText(ctx.tt("slots.choosePeriod"), keyboard);
  });

  // –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ª–æ—Ç–æ–≤ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
  bot.action(/^slots_day_(\d+)_(today|tomorrow)$/, async (ctx) => {
    await ctx.answerCbQuery();
    const serviceId = Number(ctx.match[1]);
    const period = ctx.match[2];
    
    const now = new Date();
    const targetDate = new Date(now);
    if (period === "tomorrow") {
      targetDate.setDate(targetDate.getDate() + 1);
    }
    
    const dayStart = new Date(targetDate);
    dayStart.setUTCHours(0, 0, 0, 0);
    const dayEnd = new Date(targetDate);
    dayEnd.setUTCHours(23, 59, 59, 999);
    
    const slots = await prisma.slot.findMany({
      where: { 
        serviceId,
        startAt: { gte: dayStart, lte: dayEnd }
      },
      include: { bookings: true },
      orderBy: { startAt: "asc" }
    });
    
    if (!slots.length) {
      await ctx.editMessageText(ctx.tt("slots.noSlotsDay", { date: fmtDate(targetDate) }));
      return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª–æ—Ç–∞–º–∏
    const service = await prisma.service.findUnique({ where: { id: serviceId } });
    const serviceName = getLocalizedServiceName(service!, ctx.lang);
    
    let message = `üìÖ ${serviceName}\n${fmtDate(targetDate)}\n\n`;
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ —á–∞—Å–∞–º –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const slotsByHour = slots.reduce((acc, slot) => {
      const hour = new Date(slot.startAt).getHours();
      if (!acc[hour]) acc[hour] = [];
      acc[hour].push(slot);
      return acc;
    }, {} as Record<number, typeof slots>);
    
    for (const hour of Object.keys(slotsByHour).sort((a, b) => Number(a) - Number(b))) {
      const hourSlots = slotsByHour[Number(hour)];
      message += `üïê ${hour}:00\n`;
      
      for (const slot of hourSlots) {
        const isAvailable = slot.bookings.length < slot.capacity;
        const status = isAvailable ? "‚úÖ" : "‚ùå";
        const time = fmtTime(slot.startAt);
        message += `  ${status} ${time} ${isAvailable ? ctx.tt("slots.available") : ctx.tt("slots.occupied")}\n`;
      }
      message += "\n";
    }
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback("‚óÄÔ∏è", `slots_service_${serviceId}`)],
      [Markup.button.callback(ctx.tt("slots.bookNow"), `service_${serviceId}`)]
    ]);
    
    await ctx.editMessageText(message, keyboard);
  });

  // –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ª–æ—Ç–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é
  bot.action(/^slots_week_(\d+)$/, async (ctx) => {
    await ctx.answerCbQuery();
    const serviceId = Number(ctx.match[1]);
    
    const now = new Date();
    const weekStart = new Date(now);
    weekStart.setDate(weekStart.getDate() - weekStart.getDay() + 1); // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    weekStart.setUTCHours(0, 0, 0, 0);
    
    const weekEnd = new Date(weekStart);
    weekEnd.setDate(weekEnd.getDate() + 6); // –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
    weekEnd.setUTCHours(23, 59, 59, 999);
    
    const slots = await prisma.slot.findMany({
      where: { 
        serviceId,
        startAt: { gte: weekStart, lte: weekEnd }
      },
      include: { bookings: true },
      orderBy: { startAt: "asc" }
    });
    
    if (!slots.length) {
      await ctx.editMessageText(ctx.tt("slots.noSlotsWeek"));
      return;
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –¥–Ω—è–º
    const slotsByDay = slots.reduce((acc, slot) => {
      const day = new Date(slot.startAt).toDateString();
      if (!acc[day]) acc[day] = [];
      acc[day].push(slot);
      return acc;
    }, {} as Record<string, typeof slots>);
    
    const service = await prisma.service.findUnique({ where: { id: serviceId } });
    const serviceName = getLocalizedServiceName(service!, ctx.lang);
    
    let message = `üìÖ ${serviceName}\n${ctx.tt("slots.weekView")}\n\n`;
    
    for (const day of Object.keys(slotsByDay).sort()) {
      const daySlots = slotsByDay[day];
      const availableCount = daySlots.filter(s => s.bookings.length < s.capacity).length;
      const totalCount = daySlots.length;
      
      const date = new Date(day);
      const dayName = date.toLocaleDateString("ru-RU", { weekday: "short", day: "2-digit", month: "2-digit" });
      
      message += `${dayName}: ${availableCount}/${totalCount} ${ctx.tt("slots.available")}\n`;
    }
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback("‚óÄÔ∏è", `slots_service_${serviceId}`)],
      [Markup.button.callback(ctx.tt("slots.bookNow"), `service_${serviceId}`)]
    ]);
    
    await ctx.editMessageText(message, keyboard);
  });

  // –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏
  bot.action(/^slots_back_(\d+)$/, async (ctx) => {
    await ctx.answerCbQuery();
    const serviceId = Number(ctx.match[1]);
    
    const service = await prisma.service.findUnique({ where: { id: serviceId } });
    const serviceName = getLocalizedServiceName(service!, ctx.lang);
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback(ctx.tt("slots.today"), `slots_day_${serviceId}_today`)],
      [Markup.button.callback(ctx.tt("slots.tomorrow"), `slots_day_${serviceId}_tomorrow`)],
      [Markup.button.callback(ctx.tt("slots.week"), `slots_week_${serviceId}`)],
      [Markup.button.callback("‚óÄÔ∏è", `slots_back_${serviceId}`)]
    ]);
    
    await ctx.editMessageText(ctx.tt("slots.choosePeriod"), keyboard);
  });
}

