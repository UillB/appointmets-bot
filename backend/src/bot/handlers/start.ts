import { Context, Markup, Telegraf } from "telegraf";
import { ENV } from "../../lib/env";
import { prisma } from "../../lib/prisma";

export const handleStart = (organizationId?: number) => async (ctx: Context) => {
  // deep link: /start book_{serviceId} ‚Üí —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å
  const payload = (ctx as any).startPayload as string | undefined;
  if (payload && /^book_(\d+)$/.test(payload)) {
    const serviceId = Number(payload.match(/^book_(\d+)$/)![1]);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å–ª—É–≥–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    if (organizationId) {
      const service = await prisma.service.findUnique({
        where: { id: serviceId },
        select: { organizationId: true }
      });
      
      if (!service || service.organizationId !== organizationId) {
        await ctx.reply(ctx.tt("errors.serviceNotFound"));
        return;
      }
    }
    
    const url = `${ENV.PUBLIC_BASE_URL}/webapp/calendar?serviceId=${serviceId}&cutoffMin=${ENV.BOOKING_CUTOFF_MIN}&lang=${ctx.lang}`;
    await ctx.reply(
      ctx.tt("book.openCalendar"),
      Markup.keyboard([[Markup.button.webApp("üìÜ", url)]])
        .resize()
        .oneTime()
    );
    return;
  }

  // –û–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback("üìÖ " + ctx.tt("menu.book"), "main_book")],
    [Markup.button.callback("üëÄ " + ctx.tt("menu.viewSlots"), "main_slots")],
    [Markup.button.callback("üìã " + ctx.tt("menu.myAppointments"), "main_my")],
    [Markup.button.callback("‚öôÔ∏è " + ctx.tt("menu.adminPanel"), "main_admin")],
    [Markup.button.callback("üåê " + ctx.tt("menu.language"), "lang_menu")]
  ]);
  
  await ctx.reply(ctx.tt("start.welcome"), keyboard);
};

// /lang - –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
export const handleLang = (organizationId?: number) => async (ctx: Context) => {
  const text = ctx.message && "text" in ctx.message ? ctx.message.text : "";
  const arg = String(text || "").split(/\s+/)[1]?.toLowerCase();
  
  // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –Ω–∞–ø—Ä—è–º—É—é (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  if (arg && ["ru", "en", "he"].includes(arg)) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ —Å–µ—Å—Å–∏–∏
    if (!ctx.session) ctx.session = {};
    (ctx.session as any).lang = arg;
    
    (ctx as any).lang = arg; // –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–ø–¥–µ–π—Ç–∞
    await ctx.reply(ctx.tt("lang.set", { lang: arg }));
    return;
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "lang_ru")],
    [Markup.button.callback("üá∫üá∏ English", "lang_en")],
    [Markup.button.callback("üáÆüá± ◊¢◊ë◊®◊ô◊™", "lang_he")]
  ]);
  
  await ctx.reply(ctx.tt("lang.choose"), keyboard);
};

// /help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
export const handleHelp = (organizationId?: number) => async (ctx: Context) => {
  const helpText = ctx.tt("help.text");
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback("üìÖ " + ctx.tt("menu.book"), "main_book")],
    [Markup.button.callback("üëÄ " + ctx.tt("menu.viewSlots"), "main_slots")],
    [Markup.button.callback("üìã " + ctx.tt("menu.myAppointments"), "main_my")],
    [Markup.button.callback("üåê " + ctx.tt("menu.language"), "lang_menu")]
  ]);
  
  await ctx.reply(helpText, keyboard);
};

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ —è–∑—ã–∫–∞
export function registerLangCallbacks(bot: Telegraf, organizationId?: number) {
  // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –∑–∞–ø–∏—Å–∞—Ç—å—Å—è
  bot.action("main_book", async (ctx) => {
    await ctx.answerCbQuery();
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–∏
    const { handleBookingFlow } = await import("./bookingInline");
    await handleBookingFlow(organizationId)(ctx);
  });

  // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ—Ç—ã
  bot.action("main_slots", async (ctx) => {
    await ctx.answerCbQuery();
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–æ—Ç–æ–≤
    const { handleSlots } = await import("./slots");
    await handleSlots(organizationId)(ctx);
  });

  // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –º–æ–∏ –∑–∞–ø–∏—Å–∏
  bot.action("main_my", async (ctx) => {
    await ctx.answerCbQuery();
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–∏—Ö –∑–∞–ø–∏—Å–µ–π
    const { handleMy } = await import("./my");
    await handleMy(organizationId)(ctx);
  });
  // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
  bot.action("lang_menu", async (ctx) => {
    await ctx.answerCbQuery();
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "lang_ru")],
      [Markup.button.callback("üá∫üá∏ English", "lang_en")],
      [Markup.button.callback("üáÆüá± ◊¢◊ë◊®◊ô◊™", "lang_he")]
    ]);
    
    await ctx.editMessageText(ctx.tt("lang.choose"), keyboard);
  });

  // –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —è–∑—ã–∫–∞
  bot.action(/^lang_(ru|en|he)$/, async (ctx) => {
    await ctx.answerCbQuery();
    const lang = ctx.match[1] as "ru" | "en" | "he";
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –≤ —Å–µ—Å—Å–∏–∏
    if (!ctx.session) ctx.session = {};
    (ctx.session as any).lang = lang;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    (ctx as any).lang = lang;
    
    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
    const message = ctx.tt("lang.set", { lang });
    await ctx.editMessageText(message);
  });

  // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
  bot.action("main_admin", async (ctx) => {
    await ctx.answerCbQuery();
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞: –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegramId
    const telegramId = ctx.from?.id;
    if (!telegramId) {
      await ctx.reply(ctx.tt("admin.accessDenied"));
      return;
    }

    const user = await prisma.user.findFirst({ where: { telegramId: String(telegramId) } });
    if (!user || (user.role !== 'SUPER_ADMIN' && user.role !== 'OWNER')) {
      await ctx.reply(ctx.tt("admin.accessDenied"));
      return;
    }

    const url = `${ENV.PUBLIC_BASE_URL}/webapp/admin?lang=${(ctx as any).lang || 'ru'}`;
    await ctx.reply(
      ctx.tt("admin.openPanel"),
      Markup.inlineKeyboard([[Markup.button.webApp("üîß " + ctx.tt("admin.openPanel"), url)]])
    );
  });
}
