import { Context, Markup, Telegraf } from "telegraf";
import { prisma } from "../../lib/prisma";

function fmt(dt: Date) {
  return new Date(dt).toLocaleString("ru-RU", {
    weekday: "short",
    day: "2-digit",
    month: "2-digit",
    hour: "2-digit",
    minute: "2-digit",
  });
}

/** /my ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
export function handleMy() {
  return async (ctx: Context) => {
    const chatId = String(ctx.chat?.id);
    const now = new Date();

    const appts = await prisma.appointment.findMany({
      where: { chatId, status: "confirmed" },
      include: { service: true, slot: true },
      orderBy: { slot: { startAt: "asc" } },
      take: 10,
    });

    if (!appts.length) {
      return ctx.reply("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.");
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–æ–π ‚Äú–û—Ç–º–µ–Ω–∏—Ç—å‚Äù
    for (const a of appts) {
      await ctx.reply(
        `üóì ${a.service.name}\n–í—Ä–µ–º—è: ${fmt(a.slot.startAt)}`,
        Markup.inlineKeyboard([
          [Markup.button.callback("–û—Ç–º–µ–Ω–∏—Ç—å", `cancel_${a.id}`)],
        ])
      );
    }
  };
}

/** –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–ª–±—ç–∫–æ–≤ –æ—Ç–º–µ–Ω—ã */
export function registerMyCallbacks(bot: Telegraf) {
  bot.action(/^cancel_(\d+)$/, async (ctx) => {
    await ctx.answerCbQuery();

    const id = Number(ctx.match[1]);
    const chatId = String(ctx.chat?.id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const appt = await prisma.appointment.findUnique({
      where: { id },
      include: { slot: true, service: true },
    });

    if (!appt || appt.chatId !== chatId) {
      return ctx.reply("–≠—Ç–∞ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç.");
    }

    // –ú—è–≥–∫–∞—è –æ—Ç–º–µ–Ω–∞ (—Å—Ç–∞—Ç—É—Å), –º–æ–∂–Ω–æ –∏ —É–¥–∞–ª–∏—Ç—å
    await prisma.appointment.update({
      where: { id },
      data: { status: "cancelled" },
    });

    // –û—Å–≤–æ–±–æ–∂–¥–∞—Ç—å —Å–ª–æ—Ç –Ω–µ –Ω—É–∂–Ω–æ (—É –Ω–∞—Å —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ slotId —É–∂–µ –∏—Å–∫–ª—é—á–∞–µ—Ç –¥–≤–æ–π–Ω—É—é –∑–∞–ø–∏—Å—å; —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ—Å–≤–æ–±–æ–¥–∏—Ç)
    // –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–º–µ–Ω–Ω–æ —É–¥–∞–ª—è—Ç—å:
    // await prisma.appointment.delete({ where: { id } });

    await ctx.editMessageText(
      `‚ùé –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞:\n${appt.service.name}\n${fmt(appt.slot.startAt)}`
    );
  });
}
